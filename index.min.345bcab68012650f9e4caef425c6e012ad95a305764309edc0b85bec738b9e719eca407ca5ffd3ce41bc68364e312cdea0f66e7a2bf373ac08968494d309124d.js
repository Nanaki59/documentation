var suggestions=document.getElementById('suggestions'),userinput=document.getElementById('userinput');document.addEventListener('keydown',inputFocus);function inputFocus(a){a.keyCode===191&&(a.preventDefault(),userinput.focus()),a.keyCode===27&&(userinput.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement);let c=0;b.keyCode===38?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var b=new FlexSearch({preset:'score',cache:!0,doc:{id:'id',field:['title','description','content'],store:['href','title','description']}}),c=[{id:0,href:"/prologue/introduction/",title:"Introduction",description:"A brief introduction into the world of Kerberos.io",content:'\u003cp\u003eThe \u003cstrong\u003eKerberos(dot)io\u003c/strong\u003e project, is a video surveillance solution, which was initiated back in 2014. Over the years it has evolved into a trusted, stable and feature-rich video surveillance system. To set the expectations, watch the video below to understand what it can and can\u0026rsquo;t do. If you want to install Kerberos(dot)io, it\u0026rsquo;s recommended to have a look \u003ca href="/prologue/deployments/"\u003eat the architectures page\u003c/a\u003e to find the best solution for your usecase.\u003c/p\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/382090189" width="100%" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003ch2 id="the-name-kerberosio"\u003eThe name: Kerberos.io\u003c/h2\u003e\n\u003cp\u003eMany people are confused, and don\u0026rsquo;t understand why this project is called Kerberos(dot)io. If you\u0026rsquo;ve been in the IT world for a while you will notice that Kerberos is already used for the authentication protocol \u003ca href="https://en.wikipedia.org/wiki/Kerberos_(protocol)"\u003eKerberos\u003c/a\u003e.\nWe believe that the name Kerberos(dot)io makes sense for this project as well, with a strong emphasize on the suffix \u003cstrong\u003e.io\u003c/strong\u003e, which stands for input and output devices (e.g. any type of camera). Kerberos(dot)io can be seen as a kind of security protocol driven by hardware devices such as surveillance cameras. To make writing easier we will from now on, refer to Kerberos instead of Kerberos(dot)io.\u003c/p\u003e\n\u003ch2 id="why-kerberos"\u003eWhy Kerberos\u003c/h2\u003e\n\u003cp\u003eAs burglary is very common, we believe that video surveillance is a trivial tool in our daily lifes which helps us to feel a little bit more secure. Responding to this need, a lot of companies have started developing their own video surveillance software in the past few years.\u003c/p\u003e\n\u003cp\u003eNowadays we have a myriad of expensive cameras, recorders, and software solutions which are mainly outdated and difficult to install and use. Kerberos goal is to solve these problems and to provide every human being or enterprise in this world to have their own ecological, affordable, easy-to-use and innovative surveillance solution.\u003c/p\u003e\n\u003ch2 id="what-is-kerberos"\u003eWhat is Kerberos\u003c/h2\u003e\n\u003cp\u003eKerberos is a video surveillance solution, that uses computer vision algorithms to detect changes, and that can trigger actions (notifications, api, etc). It comes in two flavors, Kerberos Open Source and Kerberos Enterprise. Kerberos can be deployed to any ARM device, Linux OS, Docker, Balenca Cloud, or cluster such as Kubernetes.\u003c/p\u003e\n\u003ch3 id="kerberos-agent"\u003eKerberos Agent\u003c/h3\u003e\n\u003cp\u003eWhen you install Kerberos Open Source or Kerberos Enterprise we will refer to it as the Kerberos agent. A Kerberos agent, is a software solution that processes the video stream of a single surveillance camera, makes and visualises recordings and takes actions (for example sending notifications).\u003c/p\u003e\n'},{id:1,href:"/prologue/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:"\u003cp\u003eTODO\u003c/p\u003e\n"},{id:2,href:"/prologue/how/",title:"How it works",description:"How Kerberos.io works and what are the building blocks.",content:'\u003cp\u003eWhen you install Kerberos Open Source or Kerberos Enterprise we will refer to it as the Kerberos Agent. A Kerberos Agent, is a software solution that consist of two pieces: Front-End and Back-End. The Back-End processes the video stream of a single surveillance camera, makes recordings and takes actions (for example sending notifications). The Front-End allows you to review recordings, and configure the Back-End.\u003c/p\u003e\n\u003cimg src="/images/prologue/agent-explanation.svg" style="width: 100%"/\u003e\n\u003ch2 id="front-end"\u003eFront-End\u003c/h2\u003e\n\u003cp\u003eThe Kerberos Agent ships with a web interface (Front-End) and a video processing engine (Back-End). The Front-End allows the user to modify specific settings, and if Kerberos Open Source, watch recordings in a easy-to-use interface; The Front-End for \u003ca href="/enterprise/introduction"\u003eKerberos Enterprise\u003c/a\u003e is only for configuration purposes only.\u003c/p\u003e\n\u003ch2 id="back-end"\u003eBack-End\u003c/h2\u003e\n\u003cp\u003eThe Back-End piece of the Kerberos Agent is a service that processes the camera feed with computer vision algorithms to detect motion, and makes recordings and/or execute specific actions. Kerberos Enterprise supports any type of IP-camera (RTSP/ONVIF), and Kerberos Open Source also adds support for USB (V4L2) and the popular Raspberry Pi camera.\u003c/p\u003e\n\u003cp\u003eDepending on which Kerberos Agent, Kerberos Open Source or Kerberos Enterprise, you will have different installation methods. If you would like to learn more about the Kerberos Agent, have a look in the related sections: \u003ca href="/opensource/introduction"\u003eOpen Source\u003c/a\u003e, \u003ca href="/enterprise/introduction"\u003eEnterprise\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="open-source-vs-enterprise"\u003eOpen Source vs Enterprise\u003c/h2\u003e\n\u003cp\u003eThe Kerberos project started as an Open Source project, with a main focus on low-cost devices such as the Raspberry Pi. Later on the Open Source version was bundled inside the Docker technology so that it was easier to distribute. Anyone can use the Open Source version for personal usage.\u003c/p\u003e\n\u003cp\u003eEnterprises are more demanding, and have a lot of surveillance cameras, therefore they need a scalable surveillance system. The \u003ca href="/enterprise/introduction"\u003eEnterprise edition\u003c/a\u003e of Kerberos allows you to operate a video surveillance cluster (Kubernetes) on-premise or in the cloud (AWS/GCP/Azure).\u003c/p\u003e\n\u003cimg src="/images/prologue/opensource-vs-enterprise-agent.svg" style="width: 100%"/\u003e\n\u003cp\u003eThe Open Source and Enterprise edition are significantly different from a source code point of view. The \u003ca href="/enterprise/introduction"\u003eEnterprise edition\u003c/a\u003e is a complete rewrite of the Open Source version, and got all the best practices we discovered over the years implemented. Both version are and will remain updated in the future.\u003c/p\u003e\n\u003ch2 id="kerberos-vault"\u003eKerberos Vault\u003c/h2\u003e\n\u003cp\u003eUsers or Enteprises which only have a few surveillance cameras to manage, probably will be fine with Kerberos Open Source. On top of that they might include \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e for remote access and monitoring.\u003c/p\u003e\n\u003cp\u003eOn the other hand if you plan to manage a larger network of surveillance cameras, you will have to look into \u003ca href="/enterprise/introduction"\u003eKerberos Enterprise\u003c/a\u003e. Backed up with Kubernetes, Kerberos Enterprise, will give you the real super powers to your scale surveillance camera landscape. Kerberos Enterprise comes with a Front-End to manage and scale your deployments inside a Kubernetes Cluster.\u003c/p\u003e\n\u003cp\u003e\u003ca href="/enterprise/first-things-first"\u003eKerberos Enterprise\u003c/a\u003e leverages a service called, \u003ca href="/vault/introduction"\u003eKerberos Vault\u003c/a\u003e, for central and hybrid storage. Kerberos Vault implements the concept of BYOC (Bring Your Own Cloud). By selecting a cloud provider (AWS, GCP, AZURE) or on-premise (Minio) you can bring your recordings where you them to be.\u003c/p\u003e\n\u003cp\u003eIn addition to the concept of BYOC, Kerberos Vault enables you to connect to Kerberos Cloud (with your own storage), send events to message brokers (such as Kafka or SQS) and enables you to build custom apps or services (such as a custom machine learning service).\u003c/p\u003e\n\u003cimg src="/images/prologue/deployment-vault.svg" style="width: 100%"/\u003e\n\u003ch2 id="kerberos-hub"\u003eKerberos Hub\u003c/h2\u003e\n\u003cp\u003eWhen installing a Kerberos Agent inside your local network, it\u0026rsquo;s possible to review your activity by using the agent its web interface. By all network principles, having a local setup, you will not be able to access the web interface from the cloud (outside your local network). On top of that, the Kerberos Agent doesn\u0026rsquo;t come with a consolidated overview. This means that you will need to open multiple web interfaces, one for each connected surveillance camera. To simplify and resolve all of these challenges, \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e was developed.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployment-hub.svg" style="width: 100%"/\u003e'},{id:3,href:"/prologue/deployments/",title:"Deployments",description:"Kerberos.io supports many different usecases and deployments.",content:'\u003cp\u003eIn this section we will explain some usecases and best practices, which might help you to define the architecture that fits your needs.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePlease read the \u003ca href="/prologue/introduction/"\u003eintroduction page\u003c/a\u003e first, before moving forward.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhen starting with Kerberos you might ask yourself, how should I deploy these so called, Kerberos agents? Well, there are different options. You can install a Kerberos agent on a Raspberry Pi, VM, Server or even in a Kubernetes cluster. So what should you do, and when? Let\u0026rsquo;s have a closer look at the different options.\u003c/p\u003e\n\u003cp\u003eThe first thing you need to consider is the environment, in which you want to deploy your Kerberos agents. Is it inside your house, your company or at a public place? Another important factor is the number of surveillance cameras you would like to monitor, and if you have any high availability requirements.\u003c/p\u003e\n\u003ch2 id="agents-on-premise"\u003eAgents on-premise\u003c/h2\u003e\n\u003cp\u003eThe most common scenario is to install your Kerberos agents on-premise. This has a couple of benefits such as latency, bandwidth and a less complex security model. When installing a Kerberos agent on-premise, you have a couple of different options.\u003c/p\u003e\n\u003ch3 id="less-than-5-cameras"\u003eLess than 5 cameras\u003c/h3\u003e\n\u003cp\u003eIf you have a limited number of surveillance cameras you would like to monitor, and don\u0026rsquo;t have any high availability requirements, the Kerberos Open Source agent is a good choice. For example, you can install the Kerberos Open Source agent on a Raspberry Pi, by using \u003ca href="/opensource/installation#kios"\u003eKiOS\u003c/a\u003e, \u003ca href="/opensource/installation-advanced#raspbian"\u003eRaspbian OS\u003c/a\u003e or compile it from source.\u003c/p\u003e\n\u003cp\u003eOn below architecture, a couple of Kerberos agents are installed on-premise (inside the local network). A Kerberos agent is installed for each surveillance camera, and each Kerberos agent runs on a seperate host (Raspberry Pi, VM, etc). The web interface of the Kerberos agents can be reached from the internal network, but cannot be accessed from the cloud.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployments/onpremise-less-then-5.svg" style="width: 100%"/\u003e\n\u003cp\u003eAnother option to install the Kerberos Open Source agent is to use Docker. Instead of having seperate hosts for each Kerberos agent, you will have a single host (Docker host) with multiple Docker containers. A Docker container is deployed for each surveillance camera, which contains the software to run the Kerberos agent.\u003c/p\u003e\n\u003cp\u003eRunning your Kerberos agents inside Docker containers, allows you to process multiple surveilllance cameras using only one host.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployments/onpremise-less-then-5-docker.svg" style="width: 100%"/\u003e\n\u003ch3 id="more-than-5-cameras"\u003eMore than 5 cameras\u003c/h3\u003e\n\u003cp\u003eWhen working within an enterprise context, where you require high availability and have a large amount of surveillance cameras being monitored, \u003ca href="/enterprise/first-things-first"\u003eKerberos Enterprise\u003c/a\u003e is a good choice. Im comparison to the Open Source version, Kerberos Enterprise uses Kubernetes to help you scale (and secure) your video surveillance landscape. Kerberos agents, or Kubernetes deployments, are deployed inside your cluster and load balanced over the different nodes. When a Kerberos agent dies, or the node on which the deployment is running, Kubernetes will reschedule it to another healthy node.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployments/onpremise-more-then-5.svg" style="width: 100%"/\u003e\n\u003ch2 id="agents-in-the-cloud"\u003eAgents in the cloud\u003c/h2\u003e\n\u003cp\u003eInstead of processing your surveillance cameras on-premise you could also process them in the cloud. There are a couple advantages, for example, you don\u0026rsquo;t have to manage your own hardware, you can simply spin up a VM on one of the hyperscalers, and add it to your existing cluster.\u003c/p\u003e\n\u003cp\u003eWhen dealing with Kerberos agents in the cloud, the complexity starts with the security model. As your surveillance cameras are running somewhere on-premise, you will need to make them available to your Kerberos agents, which are running in the cloud. There are several ways to do that, such as port forwarding (not recommended) or setting up a site-to-site VPN (recommended).\u003c/p\u003e\n\u003cp\u003eWhen setting up a VPN connection you will expose your surveillance cameras to your Kerberos agents. Once you\u0026rsquo;ve configured the Kerberos agents, data will flow through this secure tunnel, from on-premise to your cloud enviroment.\u003c/p\u003e\n\u003ch3 id="less-than-5-cameras-1"\u003eLess than 5 cameras\u003c/h3\u003e\n\u003cp\u003eIf you have a limited number of surveillance cameras you would like to monitor, and don\u0026rsquo;t have any high availability requirements, the Kerberos Open Source agent is a good choice. You can install the Kerberos Open Source agent on Docker. Instead of having seperate VM\u0026rsquo;s for each Kerberos agent, you will have a single VM (Docker host) with multiple Docker containers. A Docker container is deployed for each surveillance camera, which contains the software to run the Kerberos agent.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployments/cloud-less-then-5.svg" style="width: 100%"/\u003e\n\u003ch3 id="more-than-5-cameras-1"\u003eMore than 5 cameras\u003c/h3\u003e\n\u003cp\u003eSimilar to \u003ca href="/enterprise/first-things-first"\u003eKerberos Enterprise\u003c/a\u003e on-premise, you can run the a Kubernetes in the cloud. The exact same solution is available, only the way how you connect to your video surveillance cameras will be different, as they will probably live in a different network. To make this work you will need to setup a VPN tunnel (or whatever your security teams have defined as a back practice). When \u003ca href="/enterprise/introduction"\u003eKerberos Enterprise\u003c/a\u003e is deployed to the cloud, it can be used any where. Public cloud (AWS, Google, Azure, etc) or private cloud. You can run it where you want.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployments/cloud-more-then-5.svg" style="width: 100%"/\u003e\n\u003ch2 id="kerberos-hub"\u003eKerberos Hub\u003c/h2\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve configured one of the previously mentioned architectures, you will have one or more Kerberos agents running, in the cloud or on-premise.\u003c/p\u003e\n\u003cp\u003eThe Kerberos Open Source agent comes with a web interface, which makes it possible to review the activity for that specific agent; they don\u0026rsquo;t have a consolidated overview. This means that you will need to open multiple web interfaces, one for Kerberos agent. In contrary Kerberos Enterprise agents, don\u0026rsquo;t come with a web interface, therefore the Kerberos Hub (public or private edition) is recommended.\u003c/p\u003e\n\u003cp\u003eTo simplify this process and resolve some other challenges, Kerberos Hub was developed.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href="https://app.kerberos.io"\u003eKerberos Hub\u003c/a\u003e is a cloud solution which allows you to have a single overview of all the media recordings generated by your surveillance cameras. It\u0026rsquo;s not a solution for processing your surveillance cameras in the cloud. For processing of your surveillance cameras, a Kerberos agent is used.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eA brief list of the key features of Kerberos Hub are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSecured storage\u003c/li\u003e\n\u003cli\u003eConsolidated overview\u003c/li\u003e\n\u003cli\u003eAdvanced searching\u003c/li\u003e\n\u003cli\u003eMachine learning\u003c/li\u003e\n\u003cli\u003eAlerts\u003c/li\u003e\n\u003cli\u003eLive streaming\u003c/li\u003e\n\u003cli\u003eAccounts\u003c/li\u003e\n\u003cli\u003eLogging\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCheckout \u003ca href="https://app-demo.kerberos.io"\u003ethe demo environment\u003c/a\u003e to see and feel the Kerberos Hub solution yourself.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="architecture"\u003eArchitecture\u003c/h3\u003e\n\u003cp\u003eA simplified architecture is found below. In this architecture the Kerberos agents are installed on-premise (but this could also be in the cloud), next to the surveillance cameras. Once one of the agents recorded a footage it will send the recording to our \u003ca href="/vault/first-things-first"\u003eKerberos Vault\u003c/a\u003e service, using the credentials you\u0026rsquo;ve defined inside the agent.\u003c/p\u003e\n\u003cp\u003eAs soon as the recording is successfully received several engines will be executed, that will further process the recording and extract metadata from it (classification, origin of the surveillance camera, etc). A lot of processing is happening behind the scenes.\u003c/p\u003e\n\u003cp\u003eBy using a browser you can navigate to Kerberos Hub, and review all the recordings made by the Kerberos agents on-premise. On top of that you will receive more context about the recordings, get notifications, view a livestream and much more. Read more about \u003ca href="/hub/first-things-first"\u003eKerberos Hub\u003c/a\u003e.\u003c/p\u003e\n\u003cimg src="/images/prologue/deployment-vault.svg" style="width: 100%"/\u003e\n'},{id:4,href:"/opensource/first-things-first/",title:"First things first",description:"Answers to frequently asked questions.",content:'\u003cp\u003eKerberos started as an Open Source project back in 2014. Our main goal was, and still is, to provide everyone in this world with a free, professional and complete video surveillance system, which they can install in a couple of minutes.\nKerberos was initially developed for the Raspberry Pi, due to this many of the tools we have been using are lightweight and fast (such as C++). Over the years we have found other ways to make Kerberos available, such as KiOS (our custom Linux), Docker and Kubernetes.\u003c/p\u003e\n\u003cp\u003eIn this section we want to make clear what the Open Source version of Kerberos is about, and when you should be using it. What it can do, and what it can\u0026rsquo;t do.\u003c/p\u003e\n\u003ch2 id="license"\u003eLicense\u003c/h2\u003e\n\u003cp\u003eThe Kerberos Open Source project is licensed with \u003ca href="/opensource/license"\u003eBY-NC-SA 4.0\u003c/a\u003e, this means that everyone can use Kerberos and modify if to their needs, in a non commercial activity.\u003c/p\u003e\n\u003ch2 id="when-using-the-open-source-version"\u003eWhen using the Open Source version\u003c/h2\u003e\n\u003cp\u003eKerberos Open Source is perfect for personal usage. It\u0026rsquo;s great if you only have a couple of surveillance cameras to be managed. A Kerberos agent (e.g. on a Raspberry Pi or inside a Docker container) runs for each camera. Their are many different installation possibilities, please have a look at the \u003ca href="/architectures"\u003earchitecture\u003c/a\u003e or \u003ca href="/opensource/installation"\u003einstallation page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eEvery Kerberos agent has it\u0026rsquo;s own web interface (front-end) to review media recording, and processing engine (back-end) of a specific surveillance camera. The Open Source version doesn\u0026rsquo;t come with a central overview of all recordings generated by your Kerberos agents. For this feature we highly recommend \u003ca href="/cloud"\u003eKerberos cloud\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIf you want to manage more than 10 Kerberos agents, it\u0026rsquo;s recommended to use \u003ca href="/enterprise"\u003eKerberos Enterprise\u003c/a\u003e. This will help you to scale, support high availability and load balancing. Check out the \u003ca href="/architectures"\u003earchitectures section\u003c/a\u003e for a better understanding of when to use what.\u003c/p\u003e\n\u003ch2 id="how-to-install"\u003eHow to install\u003c/h2\u003e\n\u003cp\u003eA Kerberos Open Source agent can be installed in different ways. Every installation method have their own advantages and disadvantages. Depending on the usecase you could choose one method over the other. Read more on the \u003ca href="/opensource/installation"\u003einstallation section\u003c/a\u003e, to learn about the different installation methods.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eKiOS: You have a Raspberry Pi, and you only want to run the Kerberos agent on it.\u003c/li\u003e\n\u003cli\u003eRaspbian: You have a Raspberry Pi, but you want other services running next to your Kerberos agent.\u003c/li\u003e\n\u003cli\u003eDocker: You have a lot of IP cameras, and/or don\u0026rsquo;t want to mess with dependencies.\u003c/li\u003e\n\u003cli\u003eGeneric: You want to develop/extend Kerberos Open Source with your own features, or you want to run the Kerberos agent  on a not supported OS/architecure.\u003c/li\u003e\n\u003c/ol\u003e\n'},{id:5,href:"/opensource/get-started/",title:"Get started",description:"",content:'\u003cp\u003eOnce you\u0026rsquo;ve installed Kerberos Open Source, you will have access to the web application. This web application allows you to administrate the machinery.\u003c/p\u003e\n\u003ch2 id="welcome-page"\u003eWelcome page\u003c/h2\u003e\n\u003cp\u003eThe first time you open a browser, and navigate to the web application (ip address of your device), you will land on the welcome page. This page will guide you through some basic steps and set simple configurations such as username and password.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-welcome.png" style="width: 100%"/\u003e\n\u003ch2 id="login-page"\u003eLogin page\u003c/h2\u003e\n\u003cp\u003eWhen you\u0026rsquo;ve finished the welcome page, you will be redirected to the login page from now one. Use the credentials you have defined during the configuration of the welcome page. By default the username is \u003cstrong\u003eroot\u003c/strong\u003e, and the password is \u003cstrong\u003eroot\u003c/strong\u003e.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-login.png" style="width: 100%"/\u003e\n\u003ch2 id="dashboard"\u003eDashboard\u003c/h2\u003e\n\u003cp\u003eAfter you have signed in successfully, you will land on the dashboard page. This page will give you an overview of some simple statistics. Such as the the activity per day, per hour, etc.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-dashboard.png" style="width: 100%"/\u003e\n\u003ch2 id="media"\u003eMedia\u003c/h2\u003e\n\u003cp\u003eBy selecting a specific day from the left navigation, or choosing the date picker on the top, you will be shown all the relevant media for that specific day. Both videos and images are listed and grouped (if they are within a specific time span). By scrolling down, more media items will be shown.\u003c/p\u003e\n\u003cp\u003eYou can use the timeslider at the top of the page for browsing through the day. The white (no activity) to gray (low activity) to red (high activity), will give you an indications of the amount of recordings for that specific hour.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-media.png" style="width: 100%"/\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-media-detail.png" style="width: 100%"/\u003e\n\u003ch2 id="settings"\u003eSettings\u003c/h2\u003e\n\u003cp\u003eBefore being able to record anything, you will need to specify your capture device. A capture device is what we call: a camera. This camera can be a USB, RPi or IP camera. By default the RPi camera is selected, so if you are planning to use a IP camera make sure to change it on the settings page.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-settings.png" style="width: 100%"/\u003e\n\u003ch3 id="region-of-interest"\u003eRegion of interest\u003c/h3\u003e\n\u003cp\u003eBesides selecting the capture device, you will have different options to make the detection more intelligent, such as defining a regions of interest, or an activation timeline (when Kerberos Open Source should be active).\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-motion.png" style="width: 100%"/\u003e\n\u003ch3 id="storage"\u003eStorage\u003c/h3\u003e\n\u003cp\u003eStoring your recordings on your device is fine, on the other hand you might want to make it available remotely. By giving your \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e credentials in the storage section, your recordings will be synced to our cloud solution.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-cloud.png" style="width: 100%"/\u003e\n\u003ch2 id="system"\u003eSystem\u003c/h2\u003e\n\u003cp\u003eThis page will gave you overall information of Kerberos Open Source. It will give you information (logging) about the system, shows you some system information, the number of recordings on the system and more.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-system.png" style="width: 100%"/\u003e'},{id:6,href:"/opensource/installation/",title:"Installation",description:"",content:'\u003cp\u003eKerberos Open Source comes with different installation flavours. So you might think, why?  The reason is simple, depending on the use case one option is better than another. A short list of recommendations:\u003c/p\u003e\n\u003ch3 id="plug-and-play"\u003ePlug and play\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href="/opensource/installation#kios"\u003eKiOS\u003c/a\u003e: You have a Raspberry Pi, and you only want to run a Kerberos agent on it.\u003c/li\u003e\n\u003cli\u003e\u003ca href="/opensource/installation#docker"\u003eDocker\u003c/a\u003e: You have a lot of IP cameras, and/or don\u0026rsquo;t want to mess with dependencies.\u003c/li\u003e\n\u003cli\u003e\u003ca href="/opensource/installation#balena"\u003eBalena\u003c/a\u003e: Runnning the Kerberos Docker container on top of Balena.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id="advanced"\u003eAdvanced\u003c/h3\u003e\n\u003col start="4"\u003e\n\u003cli\u003e\u003ca href="/opensource/installation-advanced#raspbian"\u003eRaspbian\u003c/a\u003e: You have a Raspberry Pi, but you want other services running next to the Kerberos agent.\u003c/li\u003e\n\u003cli\u003e\u003ca href="/opensource/installation-advanced#generic"\u003eGeneric\u003c/a\u003e: You want to develop/extend Kerberos with your own features, or you want to run a Kerberos agent on a not supported OS/architecure.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch1 id="plug-and-play-1"\u003ePlug and play\u003c/h1\u003e\n\u003cp\u003eFollowing installation methods aim for the simplicity of installing Kerberos Open Source. With almost no efforts you can have Kerberos Open Source running.\u003c/p\u003e\n\u003ch2 id="kios"\u003eKiOS\u003c/h2\u003e\n\u003cp\u003eKiOS (Kerberos Operating System) is our custom linux OS, which runs the Kerberos agent out-of-the-box (read plug-and-play). It\u0026rsquo;s an OS designed for the Raspberry Pi (all version are supported), which you can flash to an SD card.\u003c/p\u003e\n\u003cp\u003eIt can be installed using our own installer, which comes with a nice interface that handles the flashing and network configuration for you, or you can handle the flashing yourself by using Etcher.\u003c/p\u003e\n\u003ch3 id="github"\u003eGithub\u003c/h3\u003e\n\u003cp\u003eKiOS is compiled using Buildroot, the project can be found on \u003ca href="https://github.com/kerberos-io/kios"\u003efollowing Github repo\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="kerberos-open-source-installer"\u003eKerberos Open Source installer\u003c/h3\u003e\n\u003cp\u003eInstalling the Kerberos agent to your Raspberry Pi, has never been so easy. By using our cross-platform installer, you can run a fully configured video surveillance system within 3 minutes. Indeed, we also think that\u0026rsquo;s awesome!\u003c/p\u003e\n\u003cimg src="/images/kios-install.gif" style="width: 100%"/\u003e\n\u003cp\u003eDownload the correct installer for your OS below:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehttps://github.com/kerberos-io/etcher/releases\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="etcher"\u003eEtcher\u003c/h3\u003e\n\u003cp\u003eIf you love Etcher, or the Kerberos installer is not working as expected, you can also flash the Kerberos agent to your SD card manually. It goes as following:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDownload \u003ca href="https://github.com/kerberos-io/kios/releases"\u003ethe KiOS image\u003c/a\u003e,\u003c/li\u003e\n\u003cli\u003eflash it to your SD card with Etcher,\u003c/li\u003e\n\u003cli\u003eand edit some configuration files at the boot directory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href="https://www.balena.io/etcher/"\u003e\u003cimg src="/images/etcher-install.png" style="width: 100%"/\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOnce you have download the KiOS image (make sure you downloaded the right image) and flashed it to an SD card, put it back into your working station. Navigate to the SD card and creating following files.\u003c/p\u003e\n\u003ch4 id="connecting-to-wifi"\u003eConnecting to WiFi\u003c/h4\u003e\n\u003cp\u003eIf you want to connect your Raspberry Pi to a WiFi connection, you will need to create a file \u003ccode\u003ewireless.conf\u003c/code\u003e on your SD card, with following contents. Change the SSID and password properties to your own WiFi credentials.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003eupdate_config=1\nctrl_interface=/var/run/wpa_supplicant\nnetwork={\n  scan_ssid=1\n  ssid=\u0026quot;\u0026quot;\n  psk=\u0026quot;\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="setup-a-static-ip-address"\u003eSetup a static IP-address\u003c/h4\u003e\n\u003cp\u003eIf you want to assign a static ip-address to your Raspberry Pi, create a file \u003ccode\u003estatic_ip.conf\u003c/code\u003e on your SD card, with following contents:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e#####################################################################\n# Enter the IP-address you want to have, followed by the subnet mask\n# e.g. 192.168.0.10/24\nstatic_ip=\u0026quot;\u0026quot;\n#####################################################################\n# Enter the Gateway and DNS, this will be your router in most cases\n# e.g. 192.168.0.1\nstatic_gw=\u0026quot;\u0026quot;\nstatic_dns=\u0026quot;\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="power-on-the-raspberry-pi"\u003ePower on the Raspberry Pi\u003c/h3\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve finished the installation using either the KiOS installer or Etcher, you can put the SD card into your Raspberry Pi and turn it on. Please note that the first time you boot KiOS it can take about 2 mins before the system is operational. When KiOS is ready you can open your favorite browser and type in the IP address of your Raspberry Pi. This will open the Kerberos agent\u0026rsquo;s front-end, which you can access with the username: root and password: root.\u003c/p\u003e\n\u003cimg src="/images/access.png" style="width: 100%"/\u003e\n\u003ch3 id="access-the-raspberry-pi"\u003eAccess the Raspberry Pi\u003c/h3\u003e\n\u003cp\u003eYou can access the KiOS system with attaching your Raspberry Pi to a HDMI monitor or by using \u003ccode\u003essh\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e$ ssh root@192.168.0.12\nWelcome to kios-79e30bbb!\n[root@kios-79e30bbb ~]#\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote that by default no root password is set, you can define a password in the \u003ccode\u003e/data/etc/kios.conf\u003c/code\u003e file. Once you added a password, make sure to reboot the OS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e[root@kios-79e30bbb ~]# nano /data/etc/kios.conf\n[root@kios-79e30bbb ~]# reboot\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="docker"\u003eDocker\u003c/h2\u003e\n\u003cp\u003eA Docker image (amd64, armv7, arm64) is available on \u003ca href="https://hub.docker.com/u/kerberos"\u003ethe Docker hub\u003c/a\u003e, which contains all the necessary software to setup the Kerberos agent in a matter of seconds. Before you can run this image, make sure you have Docker installed. Afterwards you can use Docker, to get the Kerberos agent up and running. All Docker images can be found on \u003ca href="https://hub.docker.com/u/kerberos"\u003ethe Docker hub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis installation guide assumes you already have a good understanding of Docker. If you want to learn more about Kerberos.io on Docker, have a look at these tutorials.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://medium.com/@cedricverst/kerberos-io-the-road-to-docker-8e048a480241"\u003eKerberos.io — the road to Docker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://medium.com/@cedricverst/kerberos-io-on-docker-19b25fa7efd1"\u003eKerberos.io on Docker\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="prerequisites"\u003ePrerequisites\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eDocker or Docker Desktop (Linux, OS or Windows)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="github-1"\u003eGithub\u003c/h3\u003e\n\u003cp\u003eAll technical information, such as Dockerfile, can be found on \u003ca href="https://github.com/kerberos-io/docker"\u003efollowing Github repo\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="download-docker-image"\u003eDownload docker image\u003c/h3\u003e\n\u003cp\u003eBefore you are able to run the Kerberos agent inside a container, you will need to pull the docker image from the Docker hub.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003edocker pull kerberos/kerberos\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen you pulled succesfully you can run your first Kerberos container as following. This will run Kerberos agent and expose the web interface on port 80, and the livestream on port 8889.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003edocker run --name camera1 -p 80:80 -p 8889:8889 -d kerberos/kerberos\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTo add more containers, you can change the name parameter and assign another port to expose the web interface and livestream (ports are unique on a OS).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003edocker run --name camera2 -p 81:80 -p 8890:8889 -d kerberos/kerberos\ndocker run --name camera3 -p 82:80 -p 8891:8889 -d kerberos/kerberos\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen the containers are created, you can open your browser and browse to your different containers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ehttp://localhost:80\nhttp://localhost:81\nhttp://localhost:82\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="volumes"\u003eVolumes\u003c/h3\u003e\n\u003cp\u003eInstead of just running the Kerberos container, you can also persist your configuration by assigning volumes. An example of mounting volumes looks like this; an overview of \u003ca href="https://github.com/kerberos-io/docker/blob/master/Dockerfile#L171-L177"\u003ethe different volumes can be found here\u003c/a\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epreload configuration,\u003c/li\u003e\n\u003cli\u003eor centralise the images/videos on your working station.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003edocker run --name kerberos-camera1 \\\n-p 80:80 -p 8889:8889 \\\n-v ~/config:/etc/opt/kerberosio/config \\\n-v ~/capture:/etc/opt/kerberosio/capture \\\n-v ~/logs:/etc/opt/kerberosio/logs \\\n-v ~/webconfig:/var/www/web/config \\\n-d kerberos/kerberos\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="balena"\u003eBalena\u003c/h2\u003e\n\u003cp\u003eRunning Kerberos inside a Docker container is great, it makes it possible to run Kerberos everywhere; basically on any OS. You can deploy Kerberos easily to the many different IoT boards we nowadays have available. The challenge with all these IoT boards is that they have different system architecures, however thanks to Docker (and its multi architecture builds), we can ship Kerberos to any of them. If you have a Raspberry Pi, you have two options: \u003ca href="/opensource/installation#docker"\u003eDocker\u003c/a\u003e and \u003ca href="/opensource/installation#kios"\u003eKiOS\u003c/a\u003e. If you have any other board, then \u003ca href="/opensource/installation#docker"\u003eDocker\u003c/a\u003e is the way to go.\u003c/p\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve deployed the Kerberos Docker container, you can start monitoring your video surveillances cameras, however it doesn\u0026rsquo;t have to stop here. Probably you also want remote access to your IoT board, and maybe some other cool stuff like system control, a VPN, a public url? This is where \u003ca href="https://balena.io"\u003eBalena.io\u003c/a\u003e comes in.\u003c/p\u003e\n\u003cp\u003eBefore getting into the details, you can \u003ca href="https://medium.com/@cedricverst/kerberos-io-on-balenacloud-7d5a5dd68992"\u003efind a more detailed tutorial at this blog\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="1-create-a-balena-account"\u003e1. Create a Balena account\u003c/h3\u003e\n\u003cp\u003eBefore moving on, make sure you have registered on \u003ca href="https://www.balena.io"\u003eBalena\u003c/a\u003e.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-balena-signup.png" style="width: 100%"/\u003e\n\u003ch3 id="2-create-a-device-and-flash"\u003e2. Create a device and flash\u003c/h3\u003e\n\u003cp\u003eAfter you signed up, you can create an application for a specific IoT board (e.g. Raspberry Pi 3). Once created you will be able to download the balena OS image, which you can flash to your SD card using \u003ca href="https://www.balena.io/etcher/"\u003eEtcher\u003c/a\u003e.\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-balena-create.png" style="width: 100%"/\u003e\n\u003ch3 id="3-connect"\u003e3. Connect\u003c/h3\u003e\n\u003cp\u003eOnce you\u0026rsquo;ve flashed the balena OS, turned on your IoT board, a new device should come up on the Balena dashboard (below the application you\u0026rsquo;ve created). At this point you will be able to connect to your device using the \u003cstrong\u003ebalena-cli\u003c/strong\u003e \u003ca href="https://github.com/balena-io/balena-cli/blob/master/INSTALL.md#executable-installer"\u003eread more about the installation here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFirst connect the \u003cstrong\u003ebalena-cli\u003c/strong\u003e to your account by executing following command. Choose the recommended option.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebalena login\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter succesfully logged in you should be able to list your devices.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebalena devices\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="4-write"\u003e4. Write\u003c/h3\u003e\n\u003cp\u003eFinally, we can push our Kerberos Docker container to our application (and devices). To do this we need to create two files.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a new directory and the Dockerfile.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe first file is named \u003ccode\u003eDockerfile\u003c/code\u003e this file will contain a base image which references to our Kerberos image, which \u003ca href="https://hub.docker.com/repository/docker/kerberos/kerberos/tags?page=1"\u003eyou can find here\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir kerberosbalena\ncd kerberosbalena\necho \'FROM kerberos/kerberos@sha256:70a8b2791c8605ca6f8442b3d7892bb9bfc0789ab2f9f68911e247f7af50caed\nCMD [\u0026quot;bash\u0026quot;, \u0026quot;/run.sh\u0026quot;]\' \u0026gt; Dockerfile\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePlease note that we specified a sha256 tag, you have to make sure you use the right sha256 tag for your architecure. In the example above we use the sha256 tag for a armv7 architecture (Raspberry Pi3).\u003c/p\u003e\n\u003col start="2"\u003e\n\u003cli\u003eCreate a Docker compose file.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe Docker compose file is optional, but can be very useful. It can be used to deploy multi container application (e.g. a webserver + database). As Kerberos has everything in one single container, this is not needed.\u003c/p\u003e\n\u003cp\u003eWe will use the `docker-compose.yml to mount volumes, so that when we restart our container all our configurations and recordings stay persisted.\u003c/p\u003e\n\u003cp\u003eCreate a new file named \u003ccode\u003edocker-compose.yml\u003c/code\u003e, and copy-paste following content.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eversion: \'2.1\'\nnetworks: {}\nvolumes:\n  config: {}\n  capture: {}\n  logs: {}\n  web: {}\nservices:\n  main:\n    build:\n      context: .\n    privileged: true\n    tty: true\n    restart: always\n    network_mode: host\n    volumes:\n      - \'config:/etc/opt/kerberosio/config\'\n      - \'capture:/etc/opt/kerberosio/capture\'\n      - \'logs:/etc/opt/kerberosio/logs\'\n      - \'web:/var/www/web/config\'\n    labels:\n      io.balena.features.kernel-modules: \'1\'\n      io.balena.features.firmware: \'1\'\n      io.balena.features.dbus: \'1\'\n      io.balena.features.supervisor-api: \'1\'\n      io.balena.features.resin-api: \'1\'\n      io.balena.features.balena-socket: \'1\'\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="5-push"\u003e5. Push\u003c/h3\u003e\n\u003cp\u003eNow we created our two files, we can publish the Kerberos container to balena (our application), by executing the push command (replace \u0026lt;application_name\u0026gt; by the name of your application).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebalena push \u0026lt;application_name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce finished you should see following message, and on the dashboard you should see your devices updating (Yes you can add multiple devices to an application). You\u0026rsquo;re ready ;)\u003c/p\u003e\n\u003cimg src="/images/opensource/kerberos-opensource-balena-push.png" style="width: 100%"/\u003e\n'},{id:7,href:"/opensource/installation-advanced/",title:"Advanced Installation",description:"",content:'\u003cp\u003eFollowing installation methods are only for advanced users, who need to have more control over the Kerberos Open Source environment.\u003c/p\u003e\n\u003ch2 id="raspbian"\u003eRaspbian\u003c/h2\u003e\n\u003cp\u003eIf you have already an OS (e.g. Raspbian Buster) flashed to your Raspberry Pi, then it makes sense to install the Kerberos agent on top of your existing OS. There are two ways to achieve this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall the Kerberos agent using Docker (more info below),\u003c/li\u003e\n\u003cli\u003eor you can install the Kerberos agent manually (machinery + web).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis section will focus on option 2, and will show you how to install the Kerberos agent manually.\u003c/p\u003e\n\u003ch3 id="update-os"\u003eUpdate OS\u003c/h3\u003e\n\u003cp\u003eLet\u0026rsquo;s start with updating the OS, and installing a couple of packages.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe have tested the Raspbian installation on \u003ccode\u003eRaspbian GNU/Linux 10 (buster)\u003c/code\u003e. It might be that if you have a different version of Raspbian, you will need to install additional/different packages.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo apt-get update \u0026amp;\u0026amp; sudo apt-get install -y ffmpeg\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="machinery"\u003eMachinery\u003c/h3\u003e\n\u003cp\u003eDownload the debian file from the machinery repository.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ehttps://github.com/kerberos-io/machinery/releases\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eA \u003ccode\u003e.deb\u003c/code\u003e file is available for every version of the Raspberry Pi. For example if you are using a Raspberry Pi 4 for version 2.8.0, execute following command. You can change the version and Raspberry Pi board to your needs.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ePlease make sure you pick the right board (rpi, rpi2, rpi3 or rpi4), and choose the version you want (e.g. 2.8.0). Replace below url, with your preferences.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ewget https://github.com/kerberos-io/machinery/releases/download/v2.8.0/rpi4-machinery-kerberosio-armhf-2.8.0.deb\nsudo dpkg -i rpi4-machinery-kerberosio-armhf-2.8.0.deb\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eDownload the x265 library (version 160) from the machinery repository, as Raspbian Buster 10 only ships with version 165. Make sure you select the right board.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003ev2.8.0/rpi4-libx265.so.160\u003c/code\u003e this will download the libx265 shared library for the Raspberry Pi 4.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ewget https://github.com/kerberos-io/machinery/releases/download/v2.8.0/rpi4-libx265.so.160\nsudo mv rpi4-libx265.so.160 /usr/lib/arm-linux-gnueabihf/libx265.so.160\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSame applies for the libx264 library, download the right shared library.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003ev2.8.0/rpi4-libx264.so.148\u003c/code\u003e this will download the libx264 shared library for the Raspberry Pi 4.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ewget https://github.com/kerberos-io/machinery/releases/download/v2.8.0/rpi4-libx264.so.148\nsudo mv rpi4-libx264.so.148 /usr/lib/arm-linux-gnueabihf/libx264.so.148\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you wish to use the Raspberry Pi Camera Module, make sure \u003ca href="https://www.raspberrypi.org/documentation/configuration/camera.md"\u003eto enable it\u003c/a\u003e using \u003ccode\u003esudo raspi-config\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo raspi-config\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnable machinery to start on boot, and start the service.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo systemctl enable kerberosio\nsudo service kerberosio start\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="web"\u003eWeb\u003c/h3\u003e\n\u003cp\u003eBefore you can run the web interface, you\u0026rsquo;ll need to download and configure a webserver. We recommend to use Nginx, as it is a light-weight and fast webserver. The web interface is written in PHP, so we also need to download PHP and some packages. Update the packages and kernel.\u003c/p\u003e\n\u003cp\u003eInstall Nginx and PHP (+extensions).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo apt-get install -y nginx php7.1 php7.1-curl php7.1-gd php7.1-fpm php7.1-cli php7.1-opcache php7.1-mbstring php7.1-xml php7.1-zip php7.1-mcrypt php7.1-readline\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCreating a Nginx config.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo rm -f /etc/nginx/sites-enabled/default\nsudo nano /etc/nginx/sites-enabled/kerberosio.conf\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy and paste following config file; this file tells nginx where the web will be installed and that it requires PHP.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003eserver\n{\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    root /var/www/web/public;\n    server_name kerberos.rpi;\n    index index.php index.html index.htm;\n    location /\n    {\n            autoindex on;\n            try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$\n    {\n            fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include fastcgi_params;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRestart nginx\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo service nginx restart\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have installed all the dependencies, we can download the web interface source code.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo mkdir -p /var/www/web \u0026amp;\u0026amp; sudo chown www-data:www-data /var/www/web\ncd /var/www/web\nsudo -u www-data wget https://github.com/kerberos-io/web/releases/download/v2.8.0/web.tar.gz\nsudo -u www-data tar xvf web.tar.gz .\nsudo chown www-data -R storage bootstrap/cache config/kerberos.php\nsudo chmod -R 775 storage bootstrap/cache\nsudo chmod 0600 config/kerberos.php\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce everything is setup correctly, you should be able to browse towards the ip-address of your Raspberry Pi and see the Kerberos web interface.\u003c/p\u003e\n\u003ch3 id="auto-removal"\u003eAuto removal\u003c/h3\u003e\n\u003cp\u003eBy default images or videos aren\u0026rsquo;t removed automatically. This means that the Kerberos agent will keep writing to disk, even if there is no more space available on your SD card. When your SD card is full you\u0026rsquo;ll be experiencing strange errors: a corrupt web interface, blank images or corrupt videos.\u003c/p\u003e\n\u003cp\u003eTo resolve this your should install a simple bash script and initiate a cronjob which continuously poll your filesystem, and start removing media when your disk is getting full.\u003c/p\u003e\n\u003cp\u003eCreate a bash script and copy following script.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enano /home/pi/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy following script (make sure the partition is correct, this is the default one for a Raspberry Pi).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epartition=/dev/root\nimagedir=/etc/opt/kerberosio/capture/\nif [[ $(df -h | grep $partition | head -1 | awk -F\' \' \'{ print $5/1 }\' | tr [\'%\'] [\u0026quot;0\u0026quot;]) -gt 90 ]];\nthen\n    echo \u0026quot;Cleaning disk\u0026quot;\n    find $imagedir -type f | sort | head -n 100 | xargs -r rm -rf;\nfi;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake the script executable.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003echmod +x /home/pi/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInitiate a cronjob, and select the nano editor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecrontab -e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAppend following line, to execute the autoremoval.sh script every 5min.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e*/5 * * * * /bin/bash /home/pi/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="generic"\u003eGeneric\u003c/h2\u003e\n\u003cp\u003eIf you want to install the Kerberos agent from source on your working station or server, either for development or running the software, this is the preferred installation procedure. We are assuming that you use a Linux OS, when using Mac OSX the installation is slightly different.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis was tested on a Ubuntu VM (18.04.3 (LTS) x64).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="machinery-1"\u003eMachinery\u003c/h3\u003e\n\u003cp\u003eUpdate the packages and kernel, and install some development tools.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo apt-get -y update\nsudo apt-get install -y git cmake subversion dh-autoreconf libcurl4-openssl-dev yasm libx264-dev pkg-config libssl-dev\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstall the FFmpeg library with x264 support.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIt\u0026rsquo;s recommended to install FFmpeg 3.1. Later versions might give issues at compilation or run time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003egit clone https://github.com/FFmpeg/FFmpeg ffmpeg\ncd ffmpeg \u0026amp;\u0026amp; git checkout remotes/origin/release/3.1\n./configure --enable-gpl --enable-libx264 --enable-shared --prefix=/usr\nmake \u0026amp;\u0026amp; sudo make install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo to your home directory, or any place your prefer and pull the machinery from Github. Afterwards create a build directory and start the compilation.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou can change the \u003ccode\u003e-j\u003c/code\u003e attribute of \u003ccode\u003emake -j8\u003c/code\u003eto the number of cores of your compilation host.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ecd \u0026amp;\u0026amp; git clone https://github.com/kerberos-io/machinery\ncd machinery \u0026amp;\u0026amp; mkdir build \u0026amp;\u0026amp; cd build\ncmake .. \u0026amp;\u0026amp; make -j8 \u0026amp;\u0026amp; make check \u0026amp;\u0026amp; sudo make install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter the machinery is build and installed succesfully, you can enable \u003ccode\u003ekerberosio\u003c/code\u003e to start on boot.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo systemctl enable kerberosio\nsudo systemctl start kerberosio\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="web-1"\u003eWeb\u003c/h3\u003e\n\u003cp\u003eIf you want to install the web, you\u0026rsquo;ll need to have a webserver (e.g. Nginx) and PHP running with some extensions. You\u0026rsquo;ll also need NodeJS and npm installed, to install Bower.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ecd ~\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo bash -\nsudo apt-add-repository -y ppa:ondrej/php\nsudo apt-get -y update\nsudo apt-get install -y git php7.1-cli php7.1-gd php7.1-mcrypt php7.1-curl php7.1-mbstring php7.1-dom php7.1-zip php7.1-fpm nodejs\nsudo npm -g install bower\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext we\u0026rsquo;ll need to install Nginx, and create a config file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo apt-get -y install nginx\nsudo rm -f /etc/nginx/sites-enabled/default\nsudo nano /etc/nginx/sites-enabled/default\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAssign Nginx to our web interface (which we will soon create).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003eserver\n{\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    root /var/www/web/public;\n    server_name kerberos.rpi;\n    index index.php index.html index.htm;\n    location /\n    {\n            autoindex on;\n            try_files $uri $uri/ /index.php?$query_string;\n    }\n    location ~ \\.php$\n    {\n            fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include fastcgi_params;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have all the dependencies installed we can clone the web repository to our working station.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003emkdir -p /var/www\ncd /var/www \u0026amp;\u0026amp; sudo git clone https://github.com/kerberos-io/web \u0026amp;\u0026amp; cd web\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstall the PHP dependency manager, \u003ccode\u003ecomposer\u003c/code\u003e, the install all the needed dependencies.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ecurl -sS https://getcomposer.org/installer | sudo php\nsudo mv composer.phar /usr/bin/composer\nsudo composer install\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eChange some permissions, to make sure we can write logging and caching files.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo chmod -R 777 storage\nsudo chmod -R 777 bootstrap/cache\nsudo chmod 777 config/kerberos.php\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe will need to install a couple of more JavaScript libraries using bower.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ecd public\nsudo bower --allow-root install\nservice nginx restart\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce everything is setup correctly, you should be able to browse towards the ip-address of your Raspberry Pi and see the Kerberos web interface.\u003c/p\u003e\n\u003ch3 id="auto-removal-1"\u003eAuto removal\u003c/h3\u003e\n\u003cp\u003eBy default images or videos aren\u0026rsquo;t removed automatically. This means that the Kerberos agent will keep writing to disk, even if there is no more space available on your SD card. When your SD card is full you\u0026rsquo;ll be experiencing strange errors: a corrupt web interface, blank images or corrupt videos.\u003c/p\u003e\n\u003cp\u003eTo resolve this your should install a simple bash script and initiate a cronjob which continuously poll your filesystem, and start removing media when your disk is getting full.\u003c/p\u003e\n\u003cp\u003eCreate a bash script and copy following script.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003enano /home/[user]/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eCopy following script (make sure the partition is correct, this is the default one for a Raspberry Pi).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epartition=/dev/root\nimagedir=/etc/opt/kerberosio/capture/\nif [[ $(df -h | grep $partition | head -1 | awk -F\' \' \'{ print $5/1 }\' | tr [\'%\'] [\u0026quot;0\u0026quot;]) -gt 90 ]];\nthen\n    echo \u0026quot;Cleaning disk\u0026quot;\n    find $imagedir -type f | sort | head -n 100 | xargs -r rm -rf;\nfi;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake the script executable.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003echmod +x /home/[user]/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInitiate a cronjob, and select the nano editor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecrontab -e\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAppend following line, to execute the autoremoval.sh script every 5min.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003e*/5 * * * * /bin/bash /home/[user]/autoremoval.sh\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:8,href:"/opensource/releases/",title:"Release notes",description:"",content:'\u003ch3 id="280"\u003e2.8.0\u003c/h3\u003e\n\u003cp\u003eAligned machinery, web and KiOS versions. Too many people were confused by the versioning.\u003c/p\u003e\n\u003ch4 id="web"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eVideos displayed on canvas were blocked in latest browsers.\u003c/li\u003e\n\u003cli\u003eDisabled reboot and shutdown.\u003c/li\u003e\n\u003cli\u003eDisabled upgrade process, use fwupdate shell command instead.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="kios"\u003eKiOS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMajor upgrade, solved many different problems (list to long); not possible to upgrade from 2.7.0 to 2.8.0.\u003c/li\u003e\n\u003cli\u003eUpdated firmware to latest Raspbian (raspberrypi-kernel_1.20180417-1).\u003c/li\u003e\n\u003cli\u003eSupport for the Raspberry Pi 4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="272"\u003e2.7.2\u003c/h3\u003e\n\u003ch4 id="machinery"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTo optimise the cloud experience we\u0026rsquo;ve added a proxy.kerberos.io machine in between.\u003c/li\u003e\n\u003cli\u003eWe\u0026rsquo;ve changed the S3 storage scheme (class:ONEZONE_IA).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="271"\u003e2.7.1\u003c/h3\u003e\n\u003ch4 id="machinery-1"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eResolved deadlock with livestreaming while restarting machinery.\u003c/li\u003e\n\u003cli\u003eRevert logging library; enabled log rotating.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="kios-1"\u003eKiOS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpdated firmware to latest Raspbian (raspberrypi-kernel_1.20180417-1).\u003c/li\u003e\n\u003cli\u003eResolved issue with WIFI on Raspberry Pi 3B+\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="270"\u003e2.7.0\u003c/h3\u003e\n\u003ch4 id="web-1"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUnique session cookie, which allows to open multiple web interfaces (e.g. when using docker).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-2"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded live streaming feature for app.kerberos.io\u003c/li\u003e\n\u003cli\u003eUpgraded logging library: log file can be max 5MB, and will rotate.\u003c/li\u003e\n\u003cli\u003eBetter logging for cloud uploads (failed information).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="docker"\u003eDocker\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eNo longer need docker-compose, we merged the web and machinery containers to \u003ca href="http://hub.docker.com/r/kerberos/kerberos"\u003ea single container\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="kios-2"\u003eKiOS\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpdated firmware to latest Raspbian.\u003c/li\u003e\n\u003cli\u003eSupport for the Raspberry Pi 3B+.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="261"\u003e2.6.1\u003c/h3\u003e\n\u003ch4 id="web-2"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSolved issue with persisting login configuration. \u003ca href="https://github.com/kerberos-io/web/issues/111"\u003e#111\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-3"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded Pushbullet. \u003ca href="https://github.com/kerberos-io/machinery/pull/139"\u003e#139\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCloud upload was not longer working (hotfix also in 2.6.0).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="260"\u003e2.6.0\u003c/h3\u003e\n\u003ch4 id="web-3"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd a cloud connection verification method. \u003ca href="https://github.com/kerberos-io/web/issues/112"\u003e#112\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-4"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd background color timestamp. \u003ca href="https://github.com/kerberos-io/machinery/issues/128"\u003e#128\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSend instanceId in AWS header when uploading to cloud (necessary for new cloud app).\u003c/li\u003e\n\u003cli\u003eBetter support for Chinese IP cameras.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="docker-1"\u003eDocker\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBug: Autoremove old images/video within Docker Containers. \u003ca href="https://github.com/kerberos-io/web/issues/104"\u003e#104\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="250"\u003e2.5.0\u003c/h3\u003e\n\u003ch4 id="web-4"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded Chinese and Italian language.\u003c/li\u003e\n\u003cli\u003eResolved issue with INSTALLED=true.\u003c/li\u003e\n\u003cli\u003eMake latest_sequence available with basic auth.  \u003ca href="https://github.com/kerberos-io/web/issues/99"\u003e#99\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-5"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eProvide an IO service for publishing events to MQTT. \u003ca href="https://github.com/kerberos-io/machinery/issues/89"\u003e#89\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOptimize recording with H264_OMX. \u003ca href="https://github.com/kerberos-io/machinery/issues/83"\u003e#83\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplement throttler for Io detections. \u003ca href="https://github.com/kerberos-io/machinery/issues/96"\u003e#96\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSSL version 1.0.0 is no longer accessible in Raspbian. \u003ca href="https://github.com/kerberos-io/machinery/issues/109"\u003e#109\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="242"\u003e2.4.2\u003c/h3\u003e\n\u003ch4 id="web-5"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTypo in french translation, causes the web interface crash.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-6"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eResolved major bug in livestream: memory leak in stream class. \u003ca href="https://github.com/kerberos-io/machinery/issues/94"\u003e#94\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCapture health verification: check if the chosen capture device is still grabbing (and didn\u0026rsquo;t stalled).\u003c/li\u003e\n\u003cli\u003eExtra logging when recording with raspberry pi camera.\u003c/li\u003e\n\u003cli\u003eMake sure the cloud upload is functioning properly, after an upload it\u0026rsquo;s verified if the files really exist in the cloud.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="241"\u003e2.4.1\u003c/h3\u003e\n\u003ch4 id="web-6"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eShow warning when system is disabled. \u003ca href="https://github.com/kerberos-io/web/issues/88"\u003e#88\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eHull selector in basic view not always working.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="240"\u003e2.4.0\u003c/h3\u003e\n\u003ch4 id="ecosystem"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eEnable/Disable force network mode.\u003c/li\u003e\n\u003cli\u003eEnable/Disable auto removal media.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="web-7"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpgrade from Laravel 4.2 to Laravel 5.4 \u003ca href="https://github.com/kerberos-io/web/issues/70"\u003e#70\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eFix bug with heatmap radius slider \u003ca href="https://github.com/kerberos-io/web/issues/84"\u003e#84\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eDesign tweaks toggle button (remove outline).\u003c/li\u003e\n\u003cli\u003eDisabled possibility to timestamp video when using hardware acceleration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="docker-2"\u003eDocker\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix SSL support \u003ca href="https://github.com/kerberos-io/docker/issues/4"\u003e#4\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eAuto removal if disk is full.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-7"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eOpenMAX IL hardware encoding for Raspberry Pi camera. \u003ca href="https://github.com/kerberos-io/machinery/issues/83"\u003e#83\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003eOptimized live streaming.\u003c/li\u003e\n\u003cli\u003eOptimized h264 recording.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBasic authentication for live streaming (username and password). \u003ca href="https://github.com/kerberos-io/machinery/issues/80"\u003e#80\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="231"\u003e2.3.1\u003c/h3\u003e\n\u003ch4 id="machinery-8"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate for kerberos.cloud: pushing content-type.\u003c/li\u003e\n\u003cli\u003eChange default configurations.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="230"\u003e2.3.0\u003c/h3\u003e\n\u003ch4 id="ecosystem-1"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSupport for Raspberry Pi Zero W. \u003ca href="https://github.com/kerberos-io/kios/issues/8"\u003e#8\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="221"\u003e2.2.1\u003c/h3\u003e\n\u003ch4 id="ecosystem-2"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUpgraded FFmpeg and libx264 on KiOS.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="web-8"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd Bulgarian translation. \u003ca href="https://github.com/kerberos-io/web/pull/81"\u003e#81\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-9"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBug: IoVideo crashes due to a memory leak. \u003ca href="https://github.com/kerberos-io/machinery/issues/70"\u003e#70\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="220"\u003e2.2.0\u003c/h3\u003e\n\u003ch4 id="ecosystem-3"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded support for Armbian.\u003c/li\u003e\n\u003cli\u003eRaspbian: Async requests causes session corruption. \u003ca href="https://github.com/kerberos-io/web/issues/78"\u003e#78\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="web-9"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eBug: Issue format instance name. \u003ca href="https://github.com/kerberos-io/web/issues/57"\u003e#57\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRedesign settings page (better UX). \u003ca href="https://github.com/kerberos-io/web/issues/39"\u003e#39\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePossibility to edit password through web interface. \u003ca href="https://github.com/kerberos-io/web/issues/63"\u003e#63\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSupport for viewing videos.\u003c/li\u003e\n\u003cli\u003eUpdate radius of heatmap.\u003c/li\u003e\n\u003cli\u003ePHP7 support. \u003ca href="https://github.com/kerberos-io/web/issues/60"\u003e#60\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWelcome/installation page. \u003ca href="https://github.com/kerberos-io/web/issues/60"\u003e#60\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTranslation updated. \u003ca href="https://github.com/kerberos-io/web/issues/74"\u003e#74\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePrivacy mode. \u003ca href="https://github.com/kerberos-io/web/issues/54"\u003e#54\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-10"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eOutput as video file. \u003ca href="https://github.com/kerberos-io/machinery/issues/60"\u003e#60\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBug: System hangs when a wrong IP camera url was defined. \u003ca href="https://github.com/kerberos-io/machinery/issues/48"\u003e#48\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRun arbitrary script/program. \u003ca href="https://github.com/kerberos-io/machinery/issues/31"\u003e#31\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBug: Weird colors from RPi Camera. \u003ca href="https://github.com/kerberos-io/machinery/issues/64"\u003e#64\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eUpgrade to OpenCV 3.2.0.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="210"\u003e2.1.0\u003c/h3\u003e\n\u003ch4 id="web-10"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded PhotoSwipe for image overview (easier to browse through images). \u003ca href="https://github.com/kerberos-io/web/issues/45"\u003e#45\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded reboot and shutdown commands. \u003ca href="https://github.com/kerberos-io/web/issues/46"\u003e#46\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded logging view to system page. \u003ca href="https://github.com/kerberos-io/web/issues/33"\u003e#33\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded labels to check if machinery is running.\u003c/li\u003e\n\u003cli\u003eAdded error handling if web interface isn’t working properly.\u003c/li\u003e\n\u003cli\u003eFixed Heatmap.js fail to load by ad-blocker. \u003ca href="https://github.com/kerberos-io/web/issues/42"\u003e#42\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eShow additional information on the dashboard (streaming is opening or not) there is no data available.\u003c/li\u003e\n\u003cli\u003eSettings page is now visible on mobile (+ changed icon).\u003c/li\u003e\n\u003cli\u003eFixed sorting of news articles.\u003c/li\u003e\n\u003cli\u003eRemoved links to assets in the cloud (.css files).\u003c/li\u003e\n\u003cli\u003eDesign: improved layout of login page, async loading of image view.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-11"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded configurable streaming port and quality. \u003ca href="https://github.com/kerberos-io/machinery/issues/41"\u003e#41\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded new algorithm: Background subtraction.\u003c/li\u003e\n\u003cli\u003eAdded new heuristic: Counter (for object/people counting). \u003ca href="https://github.com/kerberos-io/machinery/issues/42"\u003e#42\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded video capture, which can be used for debugging purposes (replay a video fragment).\u003c/li\u003e\n\u003cli\u003eIt’s now possible to mark the images with a timestamp. \u003ca href="https://github.com/kerberos-io/machinery/issues/36"\u003e#36\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixed blocking streaming socket. \u003ca href="https://github.com/kerberos-io/machinery/issues/39"\u003e#39\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="ecosystem-4"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFix removal images if disk is almost full (wrong path was defined).\u003c/li\u003e\n\u003cli\u003eSupport for the Raspberry Pi Camera module v2.1. \u003ca href="https://github.com/kerberos-io/kios/issues/3"\u003e#3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSupport for the Raspberry Pi Zero; updated kernel to latest Raspbian. \u003ca href="https://github.com/kerberos-io/kios/issues/3"\u003e#3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eKiOS GUI installer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="200"\u003e2.0.0\u003c/h3\u003e\n\u003ch4 id="web-11"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd simple ON/OFF toggle. \u003ca href="https://github.com/kerberos-io/web/issues/24"\u003e#24\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded update strategy when using KiOS. \u003ca href="https://github.com/kerberos-io/web/issues/23"\u003e#23\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eA system page which shows system information. \u003ca href="https://github.com/kerberos-io/web/issues/20"\u003e#20\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eHeatmap on dashboard page \u003ca href="https://github.com/kerberos-io/web/issues/19"\u003e#19\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdded live stream view on the dashboard page \u003ca href="https://github.com/kerberos-io/web/issues/2"\u003e#2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixed bug cloud syncing \u003ca href="https://github.com/kerberos-io/web/issues/16"\u003e#16\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFixed broken settings page when space in instane name \u003ca href="https://github.com/kerberos-io/web/issues/16"\u003e#16\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-12"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRTSP support for IP-camera\u0026rsquo;s. \u003ca href="https://github.com/kerberos-io/machinery/issues/21"\u003e#21\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eVerbose logging. \u003ca href="https://github.com/kerberos-io/machinery/issues/35"\u003e#35\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIO-devices are executed in a seperate thread. \u003ca href="https://github.com/kerberos-io/machinery/issues/28"\u003e#28\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLive streaming (MJPEG). \u003ca href="https://github.com/kerberos-io/machinery/issues/26"\u003e#26\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eExecute multiple instances on a machine. \u003ca href="https://github.com/kerberos-io/machinery/issues/24"\u003e#24\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOverride config by arguments. \u003ca href="https://github.com/kerberos-io/machinery/issues/22"\u003e#22\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMove S3 upload to machinery and remove sync-s3 repository. \u003ca href="https://github.com/kerberos-io/machinery/issues/16"\u003e#16\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="docker-3"\u003eDocker\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded Docker image (x86_x64) to Docker Hub.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="ecosystem-5"\u003eEcosystem\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdd support for Raspberry Pi 1, 2 and 3. \u003ca href="https://github.com/kerberos-io/kios/issues/1"\u003e#1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="110"\u003e1.1.0\u003c/h3\u003e\n\u003ch4 id="web-12"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSupport IP camera\u0026rsquo;s with MJPEG stream. \u003ca href="https://github.com/kerberos-io/web/issues/3"\u003e#3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduce new API methods to configure the machinery, using basic auth. \u003ca href="https://github.com/kerberos-io/web/issues/4"\u003e#4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOptimization of loading image and dashboard page, completely redesigned the retrieval of images. \u003ca href="https://github.com/kerberos-io/web/issues/5"\u003e#5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOptimization of settings page. \u003ca href="https://github.com/kerberos-io/web/issues/5"\u003e#5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTimebar gradient only works in Chrome. \u003ca href="https://github.com/kerberos-io/web/issues/6"\u003e#6\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMinor CSS fixes for responsive layout.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-13"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFlip/rotate option for capture devices. \u003ca href="https://github.com/kerberos-io/machinery/issues/1"\u003e#5\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSupport IP camera\u0026rsquo;s with MJPEG stream. \u003ca href="https://github.com/kerberos-io/machinery/issues/4"\u003e#4\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIntroduced webhook io device. \u003ca href="https://github.com/kerberos-io/machinery/issues/5"\u003e#5\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="cloud"\u003eCloud\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFixed problem when syncing a huge amount of images. \u003ca href="https://github.com/kerberos-io/sync-s3/issues/1"\u003e#1\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="103"\u003e1.0.3\u003c/h3\u003e\n\u003ch4 id="web-13"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eOptimize performance, new datastructure has been implemented.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-14"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eMemory optimization.\u003c/li\u003e\n\u003cli\u003eRemoval of images older than 3 days have been removed.\u003c/li\u003e\n\u003cli\u003eStart machinery automatically (delay has been removed).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="cloud-1"\u003eCloud\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eResolved file exist problem.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="102"\u003e1.0.2\u003c/h3\u003e\n\u003ch4 id="web-14"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTimezone on settings page is also used for the webinterface.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-15"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdded extra timezones to timezone.xml.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="101"\u003e1.0.1\u003c/h3\u003e\n\u003ch4 id="web-15"\u003eWeb\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eImproved error handling (date search).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id="machinery-16"\u003eMachinery\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eImproved memory cleanup.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="100"\u003e1.0.0\u003c/h3\u003e\n\u003ch4 id="first-commit-of-kerberosio"\u003eFirst commit of Kerberos.io\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCamera support: \u003cstrong\u003eUSBCamera\u003c/strong\u003e (V4L), \u003cstrong\u003eRaspberry Pi camera module\u003c/strong\u003e (MMAL).\u003c/li\u003e\n\u003cli\u003eConditions: \u003cstrong\u003eEnabled\u003c/strong\u003e (turn on/off Kerberos) and active \u003cstrong\u003eTime\u003c/strong\u003e per day.\u003c/li\u003e\n\u003cli\u003eAlgorithms: \u003cstrong\u003eDifferential Images\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eHeuristics: \u003cstrong\u003eSequence\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eExpositors: Select a \u003cstrong\u003eHull\u003c/strong\u003e or \u003cstrong\u003eRectangle\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eOutputs: Write image to \u003cstrong\u003eDisk\u003c/strong\u003e, trigger an \u003cstrong\u003eGPIO\u003c/strong\u003e output pin and send a \u003cstrong\u003eTCP/IP packet\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eCloud: send your images to the \u003cstrong\u003eKerberos.io cloud aplication\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:9,href:"/opensource/license/",title:"License",description:"",content:'\u003ch1 id="cc-by-nc-sa-40"\u003eCC BY-NC-SA 4.0\u003c/h1\u003e\n\u003ch2 id="summary"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eYou are free to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eShare — copy and redistribute the material in any medium or format\u003c/li\u003e\n\u003cli\u003eAdapt — remix, transform, and build upon the material\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="the-license"\u003eThe license\u003c/h2\u003e\n\u003cp\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\u0026ldquo;Public License\u0026rdquo;). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\u003c/p\u003e\n\u003ch3 id="section-1--definitions"\u003eSection 1 – Definitions.\u003c/h3\u003e\n\u003cp\u003eAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter\u0026rsquo;s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nBY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicense Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nNonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\u003c/p\u003e\n\u003ch3 id="section-2--scope"\u003eSection 2 – Scope.\u003c/h3\u003e\n\u003cp\u003eLicense grant.\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nreproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\nproduce, reproduce, and Share Adapted Material for NonCommercial purposes only.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nAdditional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\nOther rights.\u003c/p\u003e\n\u003cp\u003eMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\u003c/p\u003e\n\u003ch3 id="section-3--license-conditions"\u003eSection 3 – License Conditions.\u003c/h3\u003e\n\u003cp\u003eYour exercise of the Licensed Rights is expressly made subject to the following conditions.\u003c/p\u003e\n\u003cp\u003eAttribution.\u003c/p\u003e\n\u003cp\u003eIf You Share the Licensed Material (including in modified form), You must:\u003c/p\u003e\n\u003cp\u003eretain the following if it is supplied by the Licensor with the Licensed Material:\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nShareAlike.\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\u003c/p\u003e\n\u003cp\u003eThe Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License.\nYou must include the text of, or the URI or hyperlink to, the Adapter\u0026rsquo;s License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\nYou may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter\u0026rsquo;s License You apply.\u003c/p\u003e\n\u003ch3 id="section-4--sui-generis-database-rights"\u003eSection 4 – Sui Generis Database Rights.\u003c/h3\u003e\n\u003cp\u003eWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\u003c/p\u003e\n\u003cp\u003efor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\u003c/p\u003e\n\u003ch3 id="section-5--disclaimer-of-warranties-and-limitation-of-liability"\u003eSection 5 – Disclaimer of Warranties and Limitation of Liability.\u003c/h3\u003e\n\u003cp\u003eUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\u003c/p\u003e\n\u003ch3 id="section-6--term-and-termination"\u003eSection 6 – Term and Termination.\u003c/h3\u003e\n\u003cp\u003eThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\u003c/p\u003e\n\u003cp\u003eautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\u003c/p\u003e\n\u003ch3 id="section-7--other-terms-and-conditions"\u003eSection 7 – Other Terms and Conditions.\u003c/h3\u003e\n\u003cp\u003eThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\u003c/p\u003e\n\u003ch3 id="section-8--interpretation"\u003eSection 8 – Interpretation.\u003c/h3\u003e\n\u003cp\u003eFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\u003c/p\u003e\n'},{id:10,href:"/opensource/upgrade/",title:"Upgrade",description:"",content:'\u003cp\u003eTo upgrade your Kerberos agent to a new version you should follow the approach which fits your initial installation method. If you installed KiOS follow the KiOS upgrade procedure, if installed on Raspbian follow the Raspbian upgrade procedure, etc.\u003c/p\u003e\n\u003cp\u003ePlease note that it might be possible that some new files are added or existing files were updated. To make sure everything works as expected, you should clear your browser cache.\u003c/p\u003e\n\u003ch2 id="kios"\u003eKiOS\u003c/h2\u003e\n\u003cp\u003eIf you installed KiOS, you can use the built-in upgrade method, \u003ccode\u003efwupdate\u003c/code\u003e. The \u003ccode\u003efwupdate\u003c/code\u003e command is a shell script which contains a couple of functions. For example it allows you to download, extract and flash a new version of KiOS to your SD card. The process is pretty straight forward.\u003c/p\u003e\n\u003cp\u003eFirst SSH or connect to KiOS first, and execute following command to see your current version.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003efwupdate current\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext look for all available versions of KiOS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003efwupdate versions\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSelect the version to which you would like to upgrade, and run following command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003efwupdate upgrade \u0026lt;version\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eKiOS will reboot, and your new version will be available.\u003c/p\u003e\n\u003ch2 id="raspbian"\u003eRaspbian\u003c/h2\u003e\n\u003cp\u003eIf you want to install a new version of the Kerberos agent for Raspbian, there is no automated versioning process available like KiOS. To perform an upgrade you\u0026rsquo;ll need to follow the \u003ca href="/opensource/installation#raspbian"\u003etraditional installation\u003c/a\u003e procedure of Raspbian.\u003c/p\u003e\n\u003ch2 id="docker"\u003eDocker\u003c/h2\u003e\n\u003cp\u003eWhen a new release is available, a new Docker image will be available on the Docker hub. You can simply delete your existing container and image, and download it again.\u003c/p\u003e\n'},{id:11,href:"/opensource/contribute/",title:"Contribute",description:"",content:'\u003cp\u003eIn this document we describe the different things you need to know if you would like to add a new feature to Kerberos Open Source, or change some of its behaviour for your own use case.\u003c/p\u003e\n\u003cp\u003eBefore starting, as you might have read already, you need to know that Kerberos Open Source consists of two solutions. A front-end, also called \u003cstrong\u003eweb\u003c/strong\u003e, which allows you to review the recordings and to configure the back-end settings. A back-end, also called \u003cstrong\u003emachinery\u003c/strong\u003e, which is computer vision solution that processes the video stream of surveillance camera.\u003c/p\u003e\n\u003cp\u003eOnce you start changing or adding features to Kerberos Open Source, there is a big chance you will need to modify the previously mentioned solutions. That\u0026rsquo;s why we will discuss how you can contribute to one or both solutions.\u003c/p\u003e\n\u003ch2 id="machinery"\u003eMachinery\u003c/h2\u003e\n\u003cp\u003eContributing to the \u003ca href="https://github.com/kerberos-io/machinery"\u003emachinery repository\u003c/a\u003e requires C++ skills. This section describes all the technical stuff you will need to know. If you want to contribute, the first thing you will need to do is installing the source code on your working station.\u003c/p\u003e\n\u003ch3 id="prerequisites"\u003ePrerequisites\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eA Linux OS, or Mac OSX (Window is not supported).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="installation"\u003eInstallation\u003c/h3\u003e\n\u003cp\u003eThe complete installation can be found on the advanced installation page, describing the complete set of instructions. However for simplicity we will give a summarized version, as probably you will already have a development environment set up.\u003c/p\u003e\n\u003cp\u003eInstall development tools (C++, CMake) and V4L utils, and clone the repository. Compile the project using cmake and make.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esudo apt-get -y update\nsudo apt-get install -y git cmake subversion dh-autoreconf libcurl4-openssl-dev yasm libx264-dev pkg-config libssl-dev\ncd \u0026amp;\u0026amp; sudo git clone https://github.com/kerberos-io/machinery\ncd machinery \u0026amp;\u0026amp; mkdir build \u0026amp;\u0026amp; cd build\ncmake .. \u0026amp;\u0026amp; make -j8 \u0026amp;\u0026amp; make check \u0026amp;\u0026amp; sudo make install\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="testing"\u003eTesting\u003c/h3\u003e\n\u003cp\u003eWe strongly recommend testing as a best practice in complex projects. Therefore the machinery uses the popular C++ test library: Google Test and Google Mock. The tests can be found in the test directory. You can run the test by executing following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003emake check\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="adding-a-new-class"\u003eAdding a new class\u003c/h3\u003e\n\u003cp\u003eThis paragraph will tell you how to create a new condition, algorithm, expositor, io or capture device. For simplicity we will show how to create a new algorithm; the steps are identical if you want to create for example a new capture device; only the directory will differ.\u003c/p\u003e\n\u003ch4 id="create-the-header-file"\u003eCreate the header file\u003c/h4\u003e\n\u003cp\u003eFirst we will need to create a new header file in the include/kerberos/machinery/algorithm directory. You can copy an existing algorithm header file, and start from there. You will end up with the following header file:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e//\n//  Class: AnotherAlgorithm\n//  Description: Another algorithm\n//  Created:     ...\n//  Author:      ...\n//  Mail:        ...\n//  Website:     ...\n//\n//  The copyright to the computer program(s) herein\n//  is the property of kerberos.io, Belgium.\n//  The program(s) may be used and/or copied .\n//\n/////////////////////////////////////////////////////\n#ifndef __AnotherAlgorithm_H_INCLUDED__   // if AnotherAlgorithm.h hasn\'t been included yet...\n#define __AnotherAlgorithm_H_INCLUDED__   // #define this so the compiler knows it has been included\n#include \u0026quot;machinery/algorithm/Algorithm.h\u0026quot;\nnamespace kerberos\n{\n	char AnotherAlgorithmName[] = \u0026quot;AnotherAlgorithm\u0026quot;;\n	class AnotherAlgorithm : public AlgorithmCreator\u0026lt;AnotherAlgorithmName, AnotherAlgorithm\u0026gt;\n	{\n    	private:\n    		Image m_result;\n        	int m_parameter;\n    	public:\n        	AnotherAlgorithm(){}\n        	void setup(const StringMap \u0026amp; settings);\n        	void initialize(ImageVector \u0026amp; images);\n        	Image evaluate(ImageVector \u0026amp; images, JSON \u0026amp; data);\n        	void setParameter(int parameter);\n	};\n}\n#endif\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen creating a new class you will need to inherit from it corresponding creator, for the algorithm example: AlgorithmCreator. The creator class requires two template parameters. The first one is a unique name for the class, this name will be used to make some kind of dependency injection possible; and is used in the configurations files. The second parameter is the class itself.\u003c/p\u003e\n\u003cp\u003eThe inheritance of the creator class can be a little bit strange, but it is required and needed to register the class automatically with the factory. When the code gets compiled, the classes will be automatically registered with the factory, and you can create instances of those classes by using the name we\u0026rsquo;ve defined in the first template parameter. For example we could create a new instance of our previously created class with the following command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003eAlgorithm * anotherAlgorithm = Factory\u0026lt;Algorithm\u0026gt;::getInstance()-\u0026gt;create(\u0026quot;AnotherAlgorithm\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="create-the-source-file"\u003eCreate the source file\u003c/h4\u003e\n\u003cp\u003eOfcourse we also need to have an implementation file, therefore we need to create a new source file in the src/kerberos/machinery/algorithm directory. Just like the previous example, you can copy an existing class and implement the member functions you\u0026rsquo;ve declared in the header file. An example would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e#include \u0026quot;machinery/algorithm/AnotherAlgorithm.h\u0026quot;\nnamespace kerberos\n{\n    void AnotherAlgorithm::setup(const StringMap \u0026amp; settings)\n    {\n        Algorithm::setup(settings);\n        int parameter = std::atoi(settings.at(\u0026quot;algorithms.AnotherAlgorithm.parameter\u0026quot;).c_str());\n        setParameter(parameter);\n    }\n    void AnotherAlgorithm::initialize(ImageVector \u0026amp; images)\n    {\n        ....\n    }\n    Image AnotherAlgorithm::evaluate(ImageVector \u0026amp; images, JSON \u0026amp; data)\n    {\n        Image evaluation;\n        ... do something ..\n        return evaluation;\n    }\n    void AnotherAlgorithm::setParameter(int parameter)\n    {\n        m_parameter = parameter;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="modify-the-cmakeliststxt-file"\u003eModify the CMakeLists.txt file\u003c/h4\u003e\n\u003cp\u003eOpen the CMakeLists.txt in the src/kerberos directory file and append the name of the algorithm class to the KERBEROS_FACTORY_ENTITIES variable; for example machinery/algorithm/AnotherAlgorithm.cpp.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e# -------------------------------------------------------\n# Entities that have to be registered with the factory\n#   - classes are registered on compile time, so they\n#   don\'t belong to a library. New algorithms, expositors\n#   or Io classes belong here.\nset(KERBEROS_FACTORY_ENTITIES\n    capture/USBCamera.cpp\n    machinery/condition/Time.cpp\n    machinery/condition/Enabled.cpp\n    machinery/algorithm/DifferentialCollins.cpp\n    machinery/algorithm/DifferentialCollinsWithColor.cpp\n    machinery/algorithm/AnotherAlgorithm.cpp\n    machinery/expositor/RectangleExpositor.cpp\n    machinery/expositor/HullExpositor.cpp\n    machinery/heuristic/Sequence.cpp\n    machinery/io/IoDisk.cpp\n    machinery/io/IoTCP.cpp\n    machinery/io/IoMongoDB.cpp\n)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="create-a-new-entry-in-the-config-file"\u003eCreate a new entry in the config file\u003c/h4\u003e\n\u003cp\u003eOpen the algorithm.xml file in the config directory, and add a new tag with exactly the same name you\u0026rsquo;ve used in the header file; so in our example \u0026ldquo;AnotherAlgorithm\u0026rdquo;. Within the new tag we can add properties that we will be use to configure our algorithm, in our example we defined a field parameter so we can add this field in the config file.\u003c/p\u003e\n\u003cp\u003eOne thing you will need to do is to attach a type to a property. The type will be used by the web to automatically render the properties. For simplicity we can use the type number, this will show an input box on the settings page of the web where we are able to add numbers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003e\u0026lt;algorithms\u0026gt;\n	\u0026lt;AnotherAlgorithm\u0026gt;\n		\u0026lt;parameter type=\u0026quot;number\u0026quot;\u0026gt;5\u0026lt;/parameter\u0026gt;\n    \u0026lt;/AnotherAlgorithm\u0026gt;\n\u0026lt;/algorithms\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can retrieve the parameter in the setup function with the settings parameter.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003esettings.at(\u0026quot;algorithms.AnotherAlgorithm.parameter\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="compile"\u003eCompile\u003c/h3\u003e\n\u003cp\u003eHurray, we\u0026rsquo;ve made it! So now you can compile the code again, and if you\u0026rsquo;re using an IDE don\u0026rsquo;t forget to include the new source file! If you are compiling from the command-line you just have to go to the build folder and write make.\u003c/p\u003e\n\u003ch2 id="web"\u003eWeb\u003c/h2\u003e\n\u003cp\u003eContributing to \u003ca href="https://github.com/kerberos-io/web"\u003ethe web repository\u003c/a\u003e requires both front- and back-end skillls, more precisely BackboneJS (JavaScript) and Laravel 5.4 (PHP).\u003c/p\u003e\n\u003ch3 id="prerequisites-1"\u003ePrerequisites\u003c/h3\u003e\n\u003cp\u003eMake sure you have following services installed on your working station.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026gt;= PHP 7.1.0, NodeJS and NPM and Nginx or Apache\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id="installation-1"\u003eInstallation\u003c/h3\u003e\n\u003cp\u003eClone the repository to your working station.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003egit clone https://github.com/kerberos-io/web\ncd web\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInstall the PHP libraries using the dependency mananger, \u003cstrong\u003eComposer\u003c/strong\u003e. If you haven\u0026rsquo;t installed composer execute following commands.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ephp -r \u0026quot;readfile(\'https://getcomposer.org/installer\');\u0026quot; \u0026gt; composer-setup.php\nphp -r \u0026quot;if (hash(\'SHA384\', file_get_contents(\'composer-setup.php\')) === \'41e71d86b40f28e771d4bb662b997f79625196afcca95a5abf44391188c695c6c1456e16154c75a211d238cc3bc5cb47\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;\u0026quot;\nphp composer-setup.php\nphp -r \u0026quot;unlink(\'composer-setup.php\');\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter a succesful installation, you can run composer install or composer update from the root of the project. All dependencies will be installed or updated if a newer version is detected.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ecomposer update\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBesides PHP, the project also relies on BackboneJS (Javascript) for the front-end. Therefore a couple JavaScript dependencies should be installed.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003enpm -g install bower\ncd public\nbower update\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWhen everything is installed properly, you need too link the web project with your applicationn server. Read more on the \u003ca href="https://laravel.com/docs/5.8/deployment"\u003eLaravel documentation website\u003c/a\u003e.\u003c/p\u003e\n'},{id:12,href:"/opensource/machinery/",title:"Machinery",description:"",content:'\u003cp\u003eThe machinery is the processing engine of Kerberos Open Source. It\u0026rsquo;s an image processing framework, written in C++, who benefits from other third party libraries (OpenCV, etc). It takes images from the type of camera (USB-, IP- or RPi-camera) you\u0026rsquo;ve configured in the configuration files and executes one ore more algorithms and post-processes (e.g. save a snapshot). The configuration files allow you to define the type of camera, post-processes, conditions and much more; it\u0026rsquo;s highly configurable. It\u0026rsquo;s important to note that the machinery, out-of-the-box, can handle only one camera at a time.\u003c/p\u003e\n\u003ch2 id="project-structure"\u003eProject structure\u003c/h2\u003e\n\u003cp\u003eThe machinery is an image processing framework which is devided into four steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003econdition\u003c/li\u003e\n\u003cli\u003ealgorithm\u003c/li\u003e\n\u003cli\u003eexpositor\u003c/li\u003e\n\u003cli\u003eheuristic\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe steps belong to a four passway; illustrated on the image below. In each cycle a sequence of images is processed. Each step will process the sequence, and will return some result to the next step. For example: an algorithm will process the images and returns an array to the Expositor, which contains boolean values. The steps are loosly coupled, so they have simple conventions, just like the example before.\u003c/p\u003e\n\u003cp\u003eThanks to the loosly coupling, each step can be developed indepently. So algorithms, expositors, heuristics and conditions can be switched on the fly. This makes it easier for other developers who want to contribute to the machinery. They can create a new algorithm without knowing how a specific expositor or heuristic works. They just need to be aware of the convention an algorithm should meet.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/images/machinery/project-structure.svg" style="width: 100%"/\u003e\u003cbr/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eThese different steps can be configured by editing a couple of configurationn files located at \u003ccode\u003econfig/\u003c/code\u003e. The main configuration file \u003ccode\u003econfig/config.xml\u003c/code\u003e looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    \u0026lt;name type=\u0026quot;text\u0026quot;\u0026gt;frontdoor\u0026lt;/name\u0026gt;\n    \u0026lt;logging type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/logging\u0026gt;\n    \u0026lt;timezone type=\u0026quot;timezone\u0026quot;\u0026gt;Europe-Brussels\u0026lt;/timezone\u0026gt;\n    \u0026lt;capture file=\u0026quot;capture.xml\u0026quot;\u0026gt;RaspiCamera\u0026lt;/capture\u0026gt;\n    \u0026lt;stream file=\u0026quot;stream.xml\u0026quot;\u0026gt;Mjpg\u0026lt;/stream\u0026gt;\n    \u0026lt;condition file=\u0026quot;condition.xml\u0026quot; type=\u0026quot;multiple\u0026quot;\u0026gt;Enabled\u0026lt;/condition\u0026gt;\n    \u0026lt;algorithm file=\u0026quot;algorithm.xml\u0026quot;\u0026gt;DifferentialCollins\u0026lt;/algorithm\u0026gt;\n    \u0026lt;expositor file=\u0026quot;expositor.xml\u0026quot;\u0026gt;Hull\u0026lt;/expositor\u0026gt;\n    \u0026lt;heuristic file=\u0026quot;heuristic.xml\u0026quot;\u0026gt;Sequence\u0026lt;/heuristic\u0026gt;\n    \u0026lt;io file=\u0026quot;io.xml\u0026quot; type=\u0026quot;multiple\u0026quot;\u0026gt;Video\u0026lt;/io\u0026gt;\n    \u0026lt;cloud file=\u0026quot;cloud.xml\u0026quot;\u0026gt;S3\u0026lt;/cloud\u0026gt;\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="capture"\u003eCapture\u003c/h2\u003e\n\u003cp\u003eYou can choose which capture device you will be using, you can use your old USB webcam, the popular Raspberry Pi camera or a state-of-the-art IP camera. The capture device will take pictures and deliver them to the algorithm if the conditions (the first step of the four passway) are valid.\u003c/p\u003e\n\u003cp\u003eYou can change the capture device by changing the \u003ccode\u003econfig/config.xml\u003c/code\u003e file, and choose one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUSBCamera\u003c/li\u003e\n\u003cli\u003eRaspiCamera\u003c/li\u003e\n\u003cli\u003eIPCamera\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;capture file=\u0026quot;capture.xml\u0026quot;\u0026gt;RaspiCamera\u0026lt;/capture\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="usb-camera"\u003eUSB camera\u003c/h3\u003e\n\u003cp\u003eThe machinery supports a whole range of USB cameras. You will find a complete list here. Make sure you have updated the web interface, to make the machinery aware you will be using an USB camera.\u003c/p\u003e\n\u003ch4 id="parameters"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the USB camera can be found in the \u003ccode\u003econfig/capture.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;captures\u0026gt;\n  \u0026lt;USBCamera\u0026gt;\n    \u0026lt;frameWidth type=\u0026quot;number\u0026quot;\u0026gt;1280\u0026lt;/frameWidth\u0026gt;\n    \u0026lt;frameHeight type=\u0026quot;number\u0026quot;\u0026gt;720\u0026lt;/frameHeight\u0026gt;\n    \u0026lt;deviceNumber type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/deviceNumber\u0026gt;\n    \u0026lt;delay type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/delay\u0026gt;\n    \u0026lt;angle type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/angle\u0026gt;\n  \u0026lt;/USBCamera\u0026gt;\n\u0026lt;/captures\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="framewidth-and--height"\u003eFramewidth and -height\u003c/h5\u003e\n\u003cp\u003eYou can set the resolution of the capture device, make sure the resolution you\u0026rsquo;ve defined is valid with your camera. Please check the specs of the USB camera you\u0026rsquo;re using.\u003c/p\u003e\n\u003ch5 id="device-number"\u003eDevice number\u003c/h5\u003e\n\u003cp\u003eIf more than one device is connected, you can specify the index of the USB-camera. The index is an integer (1-5).\u003c/p\u003e\n\u003ch5 id="delay"\u003eDelay\u003c/h5\u003e\n\u003cp\u003eYou can provide a delay/interval (milliseconds) between two captures.\u003c/p\u003e\n\u003ch5 id="angle"\u003eAngle\u003c/h5\u003e\n\u003cp\u003eBy defining an angle (degrees), you can rotate the images taken by the capture device. For example if you would mount the camera upside down, than you could enter the value 180 as the angle; this will flip the images.\u003c/p\u003e\n\u003ch3 id="raspberry-pi-camera-module"\u003eRaspberry Pi Camera Module\u003c/h3\u003e\n\u003cp\u003eYou can use the Raspberry Pi Camera Module with the machinery. You just need to attach the camera module and you\u0026rsquo;re ready to go. The Raspberry Pi Camera Module is enabled by default in the web.\u003c/p\u003e\n\u003ch4 id="parameters-1"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Raspberry Pi Camera Module can be found in the config/capture.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;captures\u0026gt;\n  \u0026lt;RaspiCamera\u0026gt;\n    \u0026lt;frameWidth type=\u0026quot;number\u0026quot;\u0026gt;640\u0026lt;/frameWidth\u0026gt;\n    \u0026lt;frameHeight type=\u0026quot;number\u0026quot;\u0026gt;480\u0026lt;/frameHeight\u0026gt;\n    \u0026lt;delay type=\u0026quot;number\u0026quot;\u0026gt;1400\u0026lt;/delay\u0026gt;\n    \u0026lt;angle type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/angle\u0026gt;\n    \u0026lt;framerate type=\u0026quot;number\u0026quot;\u0026gt;30\u0026lt;/framerate\u0026gt;\n    \u0026lt;sharpness type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/sharpness\u0026gt;\n    \u0026lt;saturation type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/saturation\u0026gt;\n    \u0026lt;contrast type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/contrast\u0026gt;\n    \u0026lt;brightness type=\u0026quot;number\u0026quot;\u0026gt;50\u0026lt;/brightness\u0026gt;\n  \u0026lt;/RaspiCamera\u0026gt;\n\u0026lt;/captures\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="framewidth-and--height-1"\u003eFramewidth and -height\u003c/h5\u003e\n\u003cp\u003eYou can set the resolution of the camera module, make sure the resolution you\u0026rsquo;ve defined is valid.\u003c/p\u003e\n\u003ch5 id="delay-1"\u003eDelay\u003c/h5\u003e\n\u003cp\u003eYou can provide a delay/interval (milliseconds) between two captures.\u003c/p\u003e\n\u003ch5 id="angle-1"\u003eAngle\u003c/h5\u003e\n\u003cp\u003eBy defining an angle (degrees), you can rotate the images taken by the capture device. For example if you would mount the camera upside down, than you could enter the value 180 as the angle; this will flip the images.\u003c/p\u003e\n\u003ch5 id="framerate"\u003eFramerate\u003c/h5\u003e\n\u003cp\u003eThe number of frames captures per second. Please note that this parameter will also be used if you\u0026rsquo;re recording video. E.g. if you set this parameter to 20, you\u0026rsquo;re recorded videos will also be 20 FPS.\u003c/p\u003e\n\u003ch5 id="sharpness-saturation-contrast-brightness"\u003eSharpness, saturation, contrast, brightness\u003c/h5\u003e\n\u003cp\u003eCamera properties which you can specify to tune the settings to your needs.\u003c/p\u003e\n\u003ch3 id="ip-camera"\u003eIP camera\u003c/h3\u003e\n\u003cp\u003eThe machinery can be used with any IP camera, that provides a RTSP (or MJPEG) stream. Make sure that you know the correct URL of your IP camera, you can \u003ca href="http://www.ispyconnect.com/sources.aspx"\u003efind a list here\u003c/a\u003e.\u003c/p\u003e\n\u003ch4 id="parameters-2"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the IP capture device can be found in the \u003ccode\u003econfig/capture.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;captures\u0026gt;\n  \u0026lt;IPCamera\u0026gt;\n    \u0026lt;url type=\u0026quot;text\u0026quot;\u0026gt;http://username:password@ipaddress/image.jpg\u0026lt;/url\u0026gt;\n    \u0026lt;frameWidth type=\u0026quot;number\u0026quot;\u0026gt;800\u0026lt;/frameWidth\u0026gt;\n    \u0026lt;frameHeight type=\u0026quot;number\u0026quot;\u0026gt;640\u0026lt;/frameHeight\u0026gt;\n    \u0026lt;delay type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/delay\u0026gt;\n    \u0026lt;angle type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/angle\u0026gt;\n  \u0026lt;/IPCamera\u0026gt;\n\u0026lt;/captures\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="url"\u003eURL\u003c/h5\u003e\n\u003cp\u003eTo use your IP camera, you should provide a valid RTSP (or MJPEG) URL. The machinery will take snapshots from this stream.\u003c/p\u003e\n\u003ch5 id="framewidth-and--height-2"\u003eFramewidth and -height\u003c/h5\u003e\n\u003cp\u003eYou can set the resolution of the capture device, make sure the resolution you\u0026rsquo;ve defined is equal to the resolution you\u0026rsquo;ve defined in your IP-camera software.\u003c/p\u003e\n\u003ch5 id="delay-2"\u003eDelay\u003c/h5\u003e\n\u003cp\u003eYou can provide a delay/interval (milliseconds) between two captures.\u003c/p\u003e\n\u003ch5 id="angle-2"\u003eAngle\u003c/h5\u003e\n\u003cp\u003eBy defining an angle (degrees), you can rotate the images taken by the capture device. For example if you would mount the camera upside down, than you could enter the value 180 as the angle; this will flip the images.\u003c/p\u003e\n\u003ch2 id="condition"\u003eCondition\u003c/h2\u003e\n\u003cp\u003eThe condition is the first step of the four passway. In this step the machinery will determine if it\u0026rsquo;s allowed to proceed to the next step. For example a condition can be a time constraint, a brightness threshold, etc; multiple conditions can be selected.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;condition file=\u0026quot;condition.xml\u0026quot; type=\u0026quot;multiple\u0026quot;\u0026gt;Enabled\u0026lt;/condition\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="enabled"\u003eEnabled\u003c/h3\u003e\n\u003cp\u003eIt can be helpful to enable or disable the machinery at specific times. Therefore the time condition makes it possible to select a time range for each day of the week. When the current time is within the time range, the machinery will be enabled.\u003c/p\u003e\n\u003ch4 id="parameters-3"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Enabled condition can be found in the \u003ccode\u003econfig/condition.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;conditions\u0026gt;\n  \u0026lt;Enabled\u0026gt;\n    \u0026lt;active type=\u0026quot;bool\u0026quot;\u0026gt;true\u0026lt;/active\u0026gt;\n    \u0026lt;delay type=\u0026quot;number\u0026quot;\u0026gt;5000\u0026lt;/delay\u0026gt;\n  \u0026lt;/Enabled\u0026gt;\n\u0026lt;/conditions\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="active"\u003eActive\u003c/h5\u003e\n\u003cp\u003eThe active field is boolean value (true/false). When the active field is true, the machinery is enabled, if not it\u0026rsquo;s disabled.\u003c/p\u003e\n\u003ch5 id="delay-3"\u003eDelay\u003c/h5\u003e\n\u003cp\u003eThe delay value is used when the condition failed, so when the current time isn\u0026rsquo;t in the selected time range for that day. In that case the machinery will idle for the specified delay time. The value of the delay is expressed in miliseconds.\u003c/p\u003e\n\u003ch3 id="time"\u003eTime\u003c/h3\u003e\n\u003cp\u003eIt can be helpful to enable or disable the machinery at specific times. Therefore the time condition makes it possible to select a time range for each day of the week. When the current time is within the time range, the machinery will be enabled.\u003c/p\u003e\n\u003ch4 id="parameters-4"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Time condition can be found in the \u003ccode\u003econfig/condition.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;conditions\u0026gt;\n  \u0026lt;Time\u0026gt;\n    \u0026lt;times type=\u0026quot;timeselection\u0026quot;\u0026gt;13:00,15:00-0:01,20:58-0:01,20:59-0:01,19:20-0:01,21:59-0,0-0,0\u0026lt;/times\u0026gt;\n    \u0026lt;delay type=\u0026quot;number\u0026quot;\u0026gt;10000\u0026lt;/delay\u0026gt;\n  \u0026lt;/Time\u0026gt;\n\u0026lt;/conditions\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="times"\u003eTimes\u003c/h5\u003e\n\u003cp\u003eThe times property contains a list of times, delimited by a \u0026ldquo;-\u0026rdquo;. The first item in the list will specify the time range for the first day of the week (Monday), the last item for the last day of the week (Sunday). The begin- and end-time, for a specific day, are delimited by a \u0026ldquo;,\u0026rdquo; where the first element will specify that start time and the second one specifies the end time.\u003c/p\u003e\n\u003ch5 id="delay-4"\u003eDelay\u003c/h5\u003e\n\u003cp\u003eThe delay value is used when the condition failed, so when the current time isn\u0026rsquo;t in the selected time range for that day. In that case the machinery will idle for the specified delay time. The value of the delay is expressed in miliseconds.\u003c/p\u003e\n\u003ch2 id="algorithm"\u003eAlgorithm\u003c/h2\u003e\n\u003cp\u003eThe algorithm is the second step of the four passway. An algorithm will execute some kind of function on a sequence of images, and end up with a black and white image; just like the image below. An example of an algorithm would be one that does motion detection or one that would detect cats or dogs (using TensorFlow, ar any other Deep Learning framework).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/images/machinery/algorithm.png" style="width: 100%"/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eThe white pixels on the image will indicate the object of interest. For example, when looking for motion, the pixels that have been changed; it depends on what the algorithm is looking for. The black pixels are background pixels.\u003c/p\u003e\n\u003cp\u003eThe only convention that an algorithm should meet is that it should return a black and white image to the next step; the expositor. And of course that it requires a sequence of images as a parameter. Besides those conventions, an algorithm can do everything it wants to do. So you could create your own cat detection algorithm, marker detection, etc.\u003c/p\u003e\n\u003cp\u003eYou can select the algortihm in the \u003ccode\u003econfig/config.xml\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;algorithm file=\u0026quot;algorithm.xml\u0026quot;\u0026gt;DifferentialCollins\u0026lt;/algorithm\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="differential-images"\u003eDifferential images\u003c/h3\u003e\n\u003cp\u003eThis algorithm is a very simple method to detect motion; in terms of understanding but also processing. Just like the name says, it\u0026rsquo;s the result of comparing images. When the images are compared, we know the pixels that have been changed and if the amount of pixels that changed is big enough, one can say that something happened and thus motion was detected.\u003c/p\u003e\n\u003cp\u003eTo get a more technical explanation: the algoritm will substract 2 or more images, and once that is done it will end up with a black and white image. The white pixels will mark the pixels that where different/changed and the black pixels are the pixels that have not changed; background pixels. Please note that there are several different combinations of substracting images. However for the machinery, we will use the method of Collins et al. as this method erases the phenomenon \u0026ldquo;ghosting\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/images/machinery/differential_images.png" style="width: 100%"/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003cp\u003eIn the image above the method of Collins et al. is illustrated. For this method we will process three images. The images are a sequence (from left to right), so the first (A) image was taken before the second (B) one, and the second (B) before the third (C) one. Next we will do a first comparision (C-B) of the third (C) image and the second (B) image, and after that we will do a second comparison (C-A) of the third (C) image and first (A) image.\u003c/p\u003e\n\u003cp\u003eAfter the comparison we will end up with two difference images (C-B) and (C-A); both will mark the white pixels as changed pixels and black as non-changed pixels. To finish the algorithm we will do a logical AND-operation of the two difference images; this will give us the final black and white image ((C-B)\u0026amp;\u0026amp;(C-A)).\u003c/p\u003e\n\u003cp\u003eThe main idea of the Colins et al. method, is that it will erase \u0026ldquo;ghosting\u0026rdquo;. In the last step we are doing a logical AND-operation, by doing this we will only keep the pixels, that changed in the first two images; therefore we can elimante false positives.\u003c/p\u003e\n\u003ch4 id="parameters-5"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Differential images algorithm can be found in the config/algorithm.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;algorithms\u0026gt;\n  \u0026lt;DifferentialCollins\u0026gt;\n    \u0026lt;erode type=\u0026quot;number\u0026quot;\u0026gt;5\u0026lt;/erode\u0026gt;\n    \u0026lt;threshold type=\u0026quot;number\u0026quot;\u0026gt;20\u0026lt;/threshold\u0026gt;\n  \u0026lt;/DifferentialCollins\u0026gt;\n\u0026lt;/algorithms\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="erode"\u003eErode\u003c/h5\u003e\n\u003cp\u003eThe erode parameter represents a structural element (a morphological operation), which will be used to minimize the changed pixels; more information about eroding can be found here. The idea of the eroding is that pixels which are isolated will be removed; this means that when only one pixel changed, that pixel will reverted to the non-changed state. But for example when a large change happens and a lot of adjacent pixels are changed, the eroding will not be able to revert them.\u003c/p\u003e\n\u003cp\u003eThe higher the number of the erode parameter, the more aggressive the eroding will be. So high erode values, will make it possible that also large changes will be reverted to the non-changed state.\u003c/p\u003e\n\u003ch5 id="threshold"\u003eThreshold\u003c/h5\u003e\n\u003cp\u003eWhen doing the comparison of two images, we won\u0026rsquo;t end up with a clean black and white image. In most of the cases the values will be between 0 and 255; so gray values. This means that the value 0 will mean that both pixels where the same in both image, and values 255 mean that both pixels where totally different in both images. Of course we will also have values between 0-255, so pixels that are a little bit different in both images. So to make the resulting black and white image, we will need to apply a threshold value.\u003c/p\u003e\n\u003cp\u003eThe threshold will specify how much a pixel has to be different in the two images. So for example when the threshold is 30, it means that the difference between two pixels has to be equal or more then 30. The higher the threshold the more the pixel needs to be different, to be marked as changed.\u003c/p\u003e\n\u003ch2 id="expositor"\u003eExpositor\u003c/h2\u003e\n\u003cp\u003eAfter the algorithm is executed, the expositor will determine, a region, where the changes were detected. An expositor can constrain a region in terms of selecting a hull or defining a rectangle.\u003c/p\u003e\n\u003cp\u003eAn expositor receives a black and white image as parameter and should modify a JSON object with all the information it processed. The JSON object must include: the bounding rectangle(s) of the positions where the pixels of interest are located and the number of pixels of interest. But can also include other optional parameters.\u003c/p\u003e\n\u003cp\u003eYou can change the expositor by changing the \u003ccode\u003econfig/config.xml\u003c/code\u003e file, and choose one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHull\u003c/li\u003e\n\u003cli\u003eRectangle\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;expositor file=\u0026quot;expositor.xml\u0026quot;\u0026gt;Hull\u0026lt;/expositor\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="rectangle"\u003eRectangle\u003c/h3\u003e\n\u003cp\u003eThis is a trivial expositor. A rectangle region can be defined to constrain the locations of pixels of interest. The rectangle repositor will return the region of the pixels of interest.\u003c/p\u003e\n\u003ch4 id="parameters-6"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the rectangle expositor can be found in the config/expositor.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;expositors\u0026gt;\n  \u0026lt;Rectangle\u0026gt;\n    \u0026lt;region\u0026gt;\n      \u0026lt;x1 type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/x1\u0026gt;\n      \u0026lt;y1 type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/y1\u0026gt;\n      \u0026lt;x2 type=\u0026quot;number\u0026quot;\u0026gt;1280\u0026lt;/x2\u0026gt;\n      \u0026lt;y2 type=\u0026quot;number\u0026quot;\u0026gt;720\u0026lt;/y2\u0026gt;\n    \u0026lt;/region\u0026gt;\n  \u0026lt;/Rectangle\u0026gt;\n\u0026lt;/expositors\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="region"\u003eRegion\u003c/h5\u003e\n\u003cp\u003eThe region parameter contains 4 values; x1, y1, x2 and y2 respectively. The values x1 and y1 indicate the x- and y-coordinate of the left upper starting point. The values x2 and y2 are the bottom right coordinates. A virtual rectangle will be drawn from (x1,y1) to (x2,y2). Pixels of interest that lie within this rectangle are valid pixels; if not they are invalid.\u003c/p\u003e\n\u003ch3 id="hull"\u003eHull\u003c/h3\u003e\n\u003cp\u003eThis hull is a more complex expositor than the rectangle. A hull can be selected with the web, you can select one or more coordinates to create a flexible region. The coordinates can be adjusted afterwards and be removed by double clicking on the coordinate. You can expand the hull by removing the start coordinate, which is marked by the white bullet.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/images/machinery/hull.png" style="width: 100%"/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003ch4 id="parameters-7"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the hull expositor can be found in the config/expositor.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;expositors\u0026gt;\n  \u0026lt;Hull\u0026gt;\n    \u0026lt;region type=\u0026quot;hullselection\u0026quot;\u0026gt;347,361|627,266|975,328|1091,328|1148,413|1158,516|1121,534|962,567|699,648|531,700|243,613|423,550|665,453|850,470|666,361|467,385|325,460|165,372\u0026lt;/region\u0026gt;\n  \u0026lt;/Hull\u0026gt;\n\u0026lt;/expositors\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="region-1"\u003eRegion\u003c/h5\u003e\n\u003cp\u003eThe region parameter contains n values. Each value represents a coordinate (x,y) and are seperated by the \u0026ldquo;|\u0026rdquo; delimiter. These coordinates are used to calculate the concave hull. Pixels of interest that lie within the concave hull are valid pixels; if not they are invalid.\u003c/p\u003e\n\u003ch2 id="heuristic"\u003eHeuristic\u003c/h2\u003e\n\u003cp\u003eThe heuristic is the last step in the four passway which will decide if the detection is valid or not. It will do this by using information from the previous steps (the expositor and the algorithm); e.g. number of changed pixels.\u003c/p\u003e\n\u003cp\u003eYou can change the heuristic by changing the \u003ccode\u003econfig/config.xml\u003c/code\u003e file, and choose one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSequence\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;heuristic file=\u0026quot;heuristic.xml\u0026quot;\u0026gt;Sequence\u0026lt;/heuristic\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="sequence"\u003eSequence\u003c/h3\u003e\n\u003cp\u003eThis is a trivial heuristic. The sequence heuristic will store a single integer in memory, that will count the numbers of valid detections. When the heuristic will detect a false detection, it will decrease the count. The sequence heuristic will return true, if a threshold is reached; for example when something was detected three times in a row.\u003c/p\u003e\n\u003ch4 id="parameters-8"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Sequence heuristic can be found in the config/heuristic.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;heuristics\u0026gt;\n\u0026lt;Sequence\u0026gt;\n    \u0026lt;minimumChanges type=\u0026quot;number\u0026quot;\u0026gt;1\u0026lt;/minimumChanges\u0026gt;\n    \u0026lt;minimumDuration type=\u0026quot;number\u0026quot;\u0026gt;1\u0026lt;/minimumDuration\u0026gt;\n    \u0026lt;noMotionDelayTime type=\u0026quot;number\u0026quot;\u0026gt;2000\u0026lt;/noMotionDelayTime\u0026gt;\n  \u0026lt;/Sequence\u0026gt;\n\u0026lt;/heuristics\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="minimum-changes"\u003eMinimum changes\u003c/h5\u003e\n\u003cp\u003eThe heuristic will only return true if enough changes have been detected. The minimum of changes indicates the minimum number of pixels that have to been changed, to be a valid detection.\u003c/p\u003e\n\u003ch5 id="minimum-durations"\u003eMinimum durations\u003c/h5\u003e\n\u003cp\u003eThe minimum number of detections in a row to be a valid detection.\u003c/p\u003e\n\u003ch5 id="no-motion-delay-time"\u003eNo motion delay time\u003c/h5\u003e\n\u003cp\u003eWhen the heuristic failed, due to not enough pixels changed or not x detections in a row, the heuristic will idle for some time.\u003c/p\u003e\n\u003ch2 id="output"\u003eOutput\u003c/h2\u003e\n\u003cp\u003eIf the heuristic determined that the evaluation was valid, one or more output operations can be executed. You configure which ooutput operations that will be executed, by modifying the configuration file or using the web interface.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;?xml version=\u0026quot;1.0\u0026quot;?\u0026gt;\n\u0026lt;kerberos\u0026gt;\n  \u0026lt;instance\u0026gt;\n    ...\n    \u0026lt;io file=\u0026quot;io.xml\u0026quot; type=\u0026quot;multiple\u0026quot;\u0026gt;Video\u0026lt;/io\u0026gt;\n    ...\n  \u0026lt;/instance\u0026gt;\n\u0026lt;/kerberos\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can choose which output devices you will be using. If you select multiple outputs, seperate them with an \u003ccode\u003e,\u003c/code\u003e. You can change the output device by changing the \u003ccode\u003econfig/config.xml\u003c/code\u003e file, and choose one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDisk\u003c/li\u003e\n\u003cli\u003eVideo\u003c/li\u003e\n\u003cli\u003eGPIO\u003c/li\u003e\n\u003cli\u003eTCPSocket\u003c/li\u003e\n\u003cli\u003eWebhook\u003c/li\u003e\n\u003cli\u003eMQTT\u003c/li\u003e\n\u003cli\u003eScript\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="disk"\u003eDisk\u003c/h3\u003e\n\u003cp\u003eAn image can be saved to disk.\u003c/p\u003e\n\u003ch4 id="parameters-9"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Disk output device can be found in the \u003ccode\u003econfig/io.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;Disk\u0026gt;\n    \u0026lt;fileFormat type=\u0026quot;text\u0026quot;\u0026gt;timestamp_microseconds_instanceName_regionCoordinates_numberOfChanges_token.jpg\u0026lt;/fileFormat\u0026gt;\n    \u0026lt;directory type=\u0026quot;text\u0026quot;\u0026gt;/etc/opt/kerberosio/capture/\u0026lt;/directory\u0026gt;\n    \u0026lt;markWithTimestamp type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/markWithTimestamp\u0026gt;\n    \u0026lt;timestampColor type=\u0026quot;text\u0026quot;\u0026gt;white\u0026lt;/timestampColor\u0026gt;\n    \u0026lt;privacy type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/privacy\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/Disk\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="file-format"\u003eFile format\u003c/h5\u003e\n\u003cp\u003eThe format that will be used for the name of the image. One or more variables can be defined and will be replaced by the machinery. Note that when you\u0026rsquo;re using a variables name in the file format, that this name should be defined in the JSON object.\u003c/p\u003e\n\u003ch5 id="directory"\u003eDirectory\u003c/h5\u003e\n\u003cp\u003eThe directory where the image will be saved to. By default images are saved to the /etc/opt/kerberosio/capture directory.\u003c/p\u003e\n\u003ch5 id="mark-with-timestamp"\u003eMark with timestamp\u003c/h5\u003e\n\u003cp\u003eWhen this settings is set to true, the image is marked with a timestamp.\u003c/p\u003e\n\u003ch5 id="timestamp-color"\u003eTimestamp color\u003c/h5\u003e\n\u003cp\u003eA color can be defined for timestamp: white, black, red, green and blue.\u003c/p\u003e\n\u003ch5 id="privacy"\u003ePrivacy\u003c/h5\u003e\n\u003cp\u003eThe privacy mode can be activated to remove some parts from the image. This especially helpful if you want to filter out public areas.  When this option is enabled you will seee that after configuring the Hull expositor, you\u0026rsquo;ll see that the pixels outside your region of interest (Hull) are made black.\u003c/p\u003e\n\u003ch5 id="throttler"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the Disk will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch3 id="video"\u003eVideo\u003c/h3\u003e\n\u003cp\u003eWhen a valid event is detected, a video will be recorded for x seconds. When more valid events are detected, while a video is recording, the video file will further record for x seconds; so no new video file be recorded, but the existing one will be expanded.\u003c/p\u003e\n\u003ch4 id="parameters-10"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Video output device can be found in the \u003ccode\u003econfig/io.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;Video\u0026gt;\n    \u0026lt;fps type=\u0026quot;number\u0026quot;\u0026gt;3\u0026lt;/fps\u0026gt;\n    \u0026lt;recordAfter type=\u0026quot;number\u0026quot;\u0026gt;5\u0026lt;/recordAfter\u0026gt;\n    \u0026lt;maxDuration type=\u0026quot;number\u0026quot;\u0026gt;120\u0026lt;/maxDuration\u0026gt;\n    \u0026lt;extension type=\u0026quot;number\u0026quot;\u0026gt;mp4\u0026lt;/extension\u0026gt;\n    \u0026lt;codec type=\u0026quot;number\u0026quot;\u0026gt;h264\u0026lt;/codec\u0026gt;\n    \u0026lt;fileFormat type=\u0026quot;text\u0026quot;\u0026gt;timestamp_microseconds_instanceName_regionCoordinates_numberOfChanges_token\u0026lt;/fileFormat\u0026gt;\n    \u0026lt;directory type=\u0026quot;text\u0026quot;\u0026gt;/etc/opt/kerberosio/capture/\u0026lt;/directory\u0026gt;\n    \u0026lt;hardwareDirectory type=\u0026quot;text\u0026quot;\u0026gt;/etc/opt/kerberosio/h264/\u0026lt;/hardwareDirectory\u0026gt;\n    \u0026lt;enableHardwareEncoding type=\u0026quot;bool\u0026quot;\u0026gt;true\u0026lt;/enableHardwareEncoding\u0026gt;\n    \u0026lt;markWithTimestamp type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/markWithTimestamp\u0026gt;\n    \u0026lt;timestampColor type=\u0026quot;text\u0026quot;\u0026gt;white\u0026lt;/timestampColor\u0026gt;\n    \u0026lt;privacy type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/privacy\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/Video\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="fps"\u003eFPS\u003c/h5\u003e\n\u003cp\u003eThe frames per second of the video being recorded. Please note that this number is limited and depends heavily on your hardware setup. You\u0026rsquo;ll be receiving following warning in the systems logs, if the machinery can\u0026rsquo;t write the desired FPS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-text"\u003e[trivial] IoVideo: framerate is too fast, can\'t record video at this speed (8/FPS)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="record-after"\u003eRecord after\u003c/h5\u003e\n\u003cp\u003eThe number of seconds recorded after the last valid event was detected. This means that when a video is already recording, and a valid event was detected, the video will be expanded with x more seconds.\u003c/p\u003e\n\u003ch5 id="extensions"\u003eExtensions\u003c/h5\u003e\n\u003cp\u003eThe extension or container of the video file. We highly recommend to use the MP4 container if you want cross-browser support. Leave this setting by default, if you don\u0026rsquo;t know what you\u0026rsquo;re doing.\u003c/p\u003e\n\u003ch5 id="codec"\u003eCodec\u003c/h5\u003e\n\u003cp\u003eThe codec that is used to encode the video file.\u003c/p\u003e\n\u003ch5 id="file-format-1"\u003eFile format\u003c/h5\u003e\n\u003cp\u003eThe format that will be used for the name of the image. One or more variables can be defined and will be replaced by the machinery. Note that when you\u0026rsquo;re using a variables name in the file format, that this name should be defined in the JSON object.\u003c/p\u003e\n\u003ch5 id="directory-1"\u003eDirectory\u003c/h5\u003e\n\u003cp\u003eThe directory where the videos will be saved. By default videos are saved to the /etc/opt/kerberosio/capture directory.\u003c/p\u003e\n\u003ch5 id="hardware-directory"\u003eHardware directory\u003c/h5\u003e\n\u003cp\u003eWhen using onboard hardware encoding (e.g. with Raspberry Pi camera), h264 video files are generated and stored in this directory. Afterwards these h264 files will be containerized to mp4 files, and stored in the Directory path.\u003c/p\u003e\n\u003ch5 id="enable-hardware-encoding"\u003eEnable Hardware encoding\u003c/h5\u003e\n\u003cp\u003eA boolean which can enable or disable hardware encoding. Please note that this option is enabled by default, but does not mean that it will work if you choose to use an USB camera.\u003c/p\u003e\n\u003ch5 id="mark-with-timestamp-1"\u003eMark with timestamp\u003c/h5\u003e\n\u003cp\u003eWhen this settings is set to true, the video is marked with a timestamp (similar to the Disk device).\u003c/p\u003e\n\u003ch5 id="timestamp-color-1"\u003eTimestamp color\u003c/h5\u003e\n\u003cp\u003eA color can be defined for timestamp: white, black, red, green and blue.\u003c/p\u003e\n\u003ch5 id="privacy-1"\u003ePrivacy\u003c/h5\u003e\n\u003cp\u003eThe privacy mode can be activated to remove some parts from the video. This especially helpful if you want to filter out public areas.\u003c/p\u003e\n\u003ch5 id="video-privacy"\u003eVideo privacy\u003c/h5\u003e\n\u003cp\u003eAfter updating the configuration, you\u0026rsquo;ll see that the pixels outside your region of interest (ROI) are made black; the image below illustrates this.\u003c/p\u003e\n\u003ch5 id="throttler-1"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the Video will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch3 id="tcpip-client"\u003eTCP/IP client\u003c/h3\u003e\n\u003cp\u003eThe TCP/IP client will send a TCP packet to a server.\u003c/p\u003e\n\u003ch4 id="parameters-11"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the TCP/IP client can be found in the config/io.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;TCPSocket\u0026gt;\n    \u0026lt;server type=\u0026quot;number\u0026quot;\u0026gt;127.0.0.1\u0026lt;/server\u0026gt;\n    \u0026lt;port type=\u0026quot;number\u0026quot;\u0026gt;1337\u0026lt;/port\u0026gt;\n    \u0026lt;message type=\u0026quot;text\u0026quot;\u0026gt;it\'s so fluffy\u0026lt;/message\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/TCPSocket\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="server"\u003eServer\u003c/h5\u003e\n\u003cp\u003eThe IP of the TCP server.\u003c/p\u003e\n\u003ch5 id="port"\u003ePort\u003c/h5\u003e\n\u003cp\u003eThis is the port of the TCP server.\u003c/p\u003e\n\u003ch5 id="message"\u003eMessage\u003c/h5\u003e\n\u003cp\u003eYou can send some data to a TCP server.\u003c/p\u003e\n\u003ch5 id="throttler-2"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the TCP will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch3 id="gpio"\u003eGPIO\u003c/h3\u003e\n\u003cp\u003eA GPIO pin can be set as output device.\u003c/p\u003e\n\u003ch4 id="parameters-12"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the GPIO pin can be found in the \u003ccode\u003econfig/io.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;GPIO\u0026gt;\n    \u0026lt;pin type=\u0026quot;number\u0026quot;\u0026gt;17\u0026lt;/pin\u0026gt;\n    \u0026lt;periods type=\u0026quot;number\u0026quot;\u0026gt;5\u0026lt;/periods\u0026gt;\n    \u0026lt;periodTime type=\u0026quot;number\u0026quot;\u0026gt;100000\u0026lt;/periodTime\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/GPIO\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="pin"\u003ePin\u003c/h5\u003e\n\u003cp\u003eThe pin that will be triggered.\u003c/p\u003e\n\u003ch5 id="periods"\u003ePeriods\u003c/h5\u003e\n\u003cp\u003eThe number of times the pin will be triggered.\u003c/p\u003e\n\u003ch5 id="period-time"\u003ePeriod time\u003c/h5\u003e\n\u003cp\u003eThe time in microseconds that the pin will be set high.\u003c/p\u003e\n\u003ch5 id="throttler-3"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the GPIO will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch3 id="webhook"\u003eWebhook\u003c/h3\u003e\n\u003cp\u003eDetailed information (a JSON object) is send as a POST request to a webhook. The JSON object contains the number of changes, the region, the URL of the image, etc. This is useful if you want to integrate with your own application.\u003c/p\u003e\n\u003cp\u003eMake sure that the Webhook comes after the Disk device, otherwise the URL of the image is not included.\u003c/p\u003e\n\u003ch4 id="parameters-13"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the webhook can be found in the config/io.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;Webhook\u0026gt;\n    \u0026lt;url type=\u0026quot;text\u0026quot;\u0026gt;http://kerberos.web/api/v1/webhook\u0026lt;/url\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/Webhook\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="url-1"\u003eUrl\u003c/h5\u003e\n\u003cp\u003eThis is the URL, to which the machinery will send a JSON object (as a POST request).\u003c/p\u003e\n\u003ch5 id="throttler-4"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the Webhook will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch5 id="output-1"\u003eOutput\u003c/h5\u003e\n\u003cp\u003eA JSON object is POSTed to the url you\u0026rsquo;ve defined.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e[\n  \'regionCoordinates\' : [618, 317, 703, 493],\n  \'numberOfChanges\' : 5446,\n  \'timestamp\' : \'1465894497\',\n  \'microseconds\' : \'5-97451\',\n  \'token\' : 695,\n  \'pathToImage\' : \'1465894497_5-97451_frontdoor_618-317-703-493_5446_695.jpg\',\n  \'instanceName\' : \'frontdoor\',\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="script"\u003eScript\u003c/h3\u003e\n\u003cp\u003eA bash script can be executed after a valid event was detected. A JSON object is send in the first parameter to the script you\u0026rsquo;ve defined.\u003c/p\u003e\n\u003ch4 id="parameters-14"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the Script output device can be found in the config/io.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\u0026gt;\n  \u0026lt;Script\u0026gt;\n    \u0026lt;path type=\u0026quot;text\u0026quot;\u0026gt;/etc/opt/kerberosio/scripts/run.sh\u0026lt;/path\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/Script\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="path"\u003ePath\u003c/h5\u003e\n\u003cp\u003eThe location of the script that will be executed on detection.\u003c/p\u003e\n\u003ch5 id="throttler-5"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the Script will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch5 id="example"\u003eExample\u003c/h5\u003e\n\u003cp\u003eBy default the script will point to /etc/opt/kerberosio/scripts/run.sh, which contains a template how you should start your script. Note that when using KiOS, this script will be read-only, copy it to the /data folder and change the path parameter.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003e#!/bin/bash\n# -------------------------------------------\n# This is an example script which illustrates\n# how to use the Script IO device.\n#\n# --------------------------------------\n# The first parameter is the JSON object\n#\n# e.g. {\u0026quot;regionCoordinates\u0026quot;:[308,250,346,329],\u0026quot;numberOfChanges\u0026quot;:194,\u0026quot;timestamp\u0026quot;:\u0026quot;1486049622\u0026quot;,\u0026quot;microseconds\u0026quot;:\u0026quot;6-161868\u0026quot;,\u0026quot;token\u0026quot;:344,\u0026quot;pathToImage\u0026quot;:\u0026quot;1486049622_6-161868_frontdoor_308-250-346-329_194_344.jpg\u0026quot;,\u0026quot;instanceName\u0026quot;:\u0026quot;frontdoor\u0026quot;}\nJSON=$1\n# -------------------------------------------\n# You can use python to parse the JSON object\n# and get the required fields\nname=$(echo $JSON | python -c \u0026quot;import sys, json; print json.load(sys.stdin)[\'instanceName\']\u0026quot;)\ncoordinates=$(echo $JSON | python -c \u0026quot;import sys, json; print json.load(sys.stdin)[\'regionCoordinates\']\u0026quot;)\nchanges=$(echo $JSON | pythfon -c \u0026quot;import sys, json; print json.load(sys.stdin)[\'numberOfChanges\']\u0026quot;)\nimage=$(echo $JSON | python -c \u0026quot;import sys, json; print json.load(sys.stdin)[\'pathToImage\']\u0026quot;)\nThe idea is that you can use Python in your bash script, to parse the JSON object send as first parameter. Afterwards you can do with the output what you want.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="mqtt"\u003eMQTT\u003c/h3\u003e\n\u003cp\u003eMQTT protocol is a light-weight Machine to Machine (M2M) protocol widely used in Internet of things.\nDetailed information (a JSON object) is published to an MQTT topic. The JSON object contains the number of changes, the region, the URL of the image, etc.\u003c/p\u003e\n\u003ch4 id="parameters-15"\u003eParameters\u003c/h4\u003e\n\u003cp\u003eThe parameters of the MQTT output can be found in the config/io.xml file, but you can also use the web to modify the parameters. Below you see a default configuration file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;ios\n  \u0026lt;MQTT\u0026gt;\n    \u0026lt;secure type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/secure\u0026gt;\n    \u0026lt;verifycn type=\u0026quot;bool\u0026quot;\u0026gt;false\u0026lt;/verifycn\u0026gt;\n    \u0026lt;server type=\u0026quot;number\u0026quot;\u0026gt;127.0.0.1\u0026lt;/server\u0026gt;\n    \u0026lt;port type=\u0026quot;number\u0026quot;\u0026gt;1883\u0026lt;/port\u0026gt;\n    \u0026lt;topic type=\u0026quot;text\u0026quot;\u0026gt;kios/mqtt\u0026lt;/topic\u0026gt;\n    \u0026lt;username type=\u0026quot;text\u0026quot;\u0026gt;\u0026lt;/username\u0026gt;\n    \u0026lt;password type=\u0026quot;text\u0026quot;\u0026gt;\u0026lt;/password\u0026gt;\n    \u0026lt;throttler type=\u0026quot;number\u0026quot;\u0026gt;0\u0026lt;/throttler\u0026gt;\n  \u0026lt;/MQTT\u0026gt;\n\u0026lt;/ios\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="secure"\u003eSecure\u003c/h5\u003e\n\u003cp\u003eIf checked, enable SSL/TLS support. Please note that when SSL/TLS support is enabled, the server certificate issuer is verified against the CA (Certification Authority) files available in /etc/ssl/certs.\u003c/p\u003e\n\u003ch5 id="verifycn"\u003eVerifycn\u003c/h5\u003e\n\u003cp\u003eIf checked, the MQTT server FQDN or ip address must match the CN (Common Name) of the server certificate.\u003c/p\u003e\n\u003ch5 id="server-1"\u003eServer\u003c/h5\u003e\n\u003cp\u003eIP address or FQDN of the MQTT broker.\u003c/p\u003e\n\u003ch5 id="port-1"\u003ePort\u003c/h5\u003e\n\u003cp\u003eTCP port of the MQTT broker.\u003c/p\u003e\n\u003ch5 id="topic"\u003eTopic\u003c/h5\u003e\n\u003cp\u003eThe topic to publish to.\u003c/p\u003e\n\u003ch5 id="username"\u003eUsername\u003c/h5\u003e\n\u003cp\u003eThe username for authenticating to the MQTT broker. This is only supported by brokers that implement the MQTT spec v3.1. If username is not set (empty), the password argument is ignored. This is only needed if the MQTT broker is configured for authentication.\u003c/p\u003e\n\u003ch5 id="password"\u003ePassword\u003c/h5\u003e\n\u003cp\u003eThe password to use, together with the username, for authenticating to the MQTT broker. This is only supported by brokers that implement the MQTT spec v3.1. This is only needed if the MQTT broker is configured for authentication.\u003c/p\u003e\n\u003ch5 id="throttler-6"\u003eThrottler\u003c/h5\u003e\n\u003cp\u003eControl the number of executions by setting a throttling value. E.g. if you set throttling to 5, the MQTT will only be triggered once in 5 seconds, nevertheless more detections occurred.\u003c/p\u003e\n\u003ch5 id="output-2"\u003eOutput\u003c/h5\u003e\n\u003cp\u003eA JSON object is published to the topic of the MQTT broker you have configured.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e[\n  \'regionCoordinates\' : [618, 317, 703, 493],\n  \'numberOfChanges\' : 5446,\n  \'timestamp\' : \'1465894497\',\n  \'microseconds\' : \'5-97451\',\n  \'token\' : 695,\n  \'pathToImage\' : \'1465894497_5-97451_frontdoor_618-317-703-493_5446_695.jpg\',\n  \'instanceName\' : \'frontdoor\',\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch5 id="example-1"\u003eExample\u003c/h5\u003e\n\u003cp\u003eIt is possible to subscribe multiple distributed IoT devices to the same MQTT topic and perform specific actions upon the detection of a motion. Devices with more resources could fetch the image to perform further elaboration.\u003c/p\u003e\n\u003ch2 id="streaming"\u003eStreaming\u003c/h2\u003e\n\u003cp\u003eThe machinery has the ability to stream your capture device as a MJPG stream.\u003c/p\u003e\n\u003ch3 id="parameters-16"\u003eParameters\u003c/h3\u003e\n\u003cp\u003eThe parameters for the supported streaming protocols can be found in the \u003ccode\u003econfig/stream.xml\u003c/code\u003e file, but you can also use the web to modify the parameters. Below you see a default configuration file; at the moment of writing only a MJPG stream is supported.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-xml"\u003e\u0026lt;streams\u0026gt;\n	\u0026lt;Mjpg\u0026gt;\n    	\u0026lt;enabled type=\u0026quot;bool\u0026quot;\u0026gt;true\u0026lt;/enabled\u0026gt;\n    	\u0026lt;streamPort type=\u0026quot;number\u0026quot;\u0026gt;8889\u0026lt;/streamPort\u0026gt;\n    	\u0026lt;quality type=\u0026quot;number\u0026quot;\u0026gt;75\u0026lt;/quality\u0026gt;\n    	\u0026lt;username type=\u0026quot;number\u0026quot;\u0026gt;\u0026lt;/username\u0026gt;\n    	\u0026lt;password type=\u0026quot;number\u0026quot;\u0026gt;75\u0026lt;/password\u0026gt;\n    \u0026lt;/Mjpg\u0026gt;\n\u0026lt;/streams\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4 id="enabled-1"\u003eEnabled\u003c/h4\u003e\n\u003cp\u003eA boolean which turns ON/OFF the stream. This is interesting when working with IP cameras, where you already have an RTSP/MJPG stream from the camera itself.\u003c/p\u003e\n\u003ch4 id="stream-port"\u003eStream Port\u003c/h4\u003e\n\u003cp\u003eThe port on which the stream is available.\u003c/p\u003e\n\u003ch4 id="quality"\u003eQuality\u003c/h4\u003e\n\u003cp\u003eThe quality is a value between [0-100]. The lower the quality, the more the image will be compressed. If you\u0026rsquo;re using the RaspberryPi Camera module, this option will be ignored.\u003c/p\u003e\n\u003ch4 id="usernamepassword"\u003eUsername/password\u003c/h4\u003e\n\u003cp\u003eYou can secure the MJPEG streaming with a username and password. These credentials will be used to authorize your requests using Basic Authentication. Please note that once enabled, the live stream on the dashboard page can fail; however it will work if you open it directly in your browser or ip camera client. The format of the streaming url, after authentication enabled, will look as following:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-ts"\u003ehttp://username:password@ip-camera:8899\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:13,href:"/opensource/web/",title:"Web",description:"",content:'\u003cp\u003eThe web is responsible for the visualization. It\u0026rsquo;s a GUI which helps the user to find activity at a specific period, configure the machinery, view a live stream, see system information and much more.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s written in PHP using the extremely popular PHP Framework Laravel, and Javascript using the client-side framework BackboneJS. We will discuss the different pages and functionality briefly. Please check out \u003ca href="https://demo.kerberos.io"\u003ethe demo environment\u003c/a\u003e if you want to see a real life example.\u003c/p\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eWe will shortly discuss the different pages that make up the web interface of Kerberos Open Source.\u003c/p\u003e\n\u003ch3 id="dashboard"\u003eDashboard\u003c/h3\u003e\n\u003cp\u003eThe landing page of the web is the dashboard. On the dashboard a user will see some statistics: activity per hour, activity per day, a live stream, the latest activity and a heatmap.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="/images/web/dashboard.png" style="width: 100%"/\u003e\u003cbr/\u003e\u003c/p\u003e\n\u003ch3 id="overview-1"\u003eOverview\u003c/h3\u003e\n\u003cp\u003eWhen selecting a specific day, you\u0026rsquo;ll will get a timeline and overview. By using the timeline you can navigate through a day; the timeline highlights the amount of activity, from gray to red.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/web/overview.png" alt="web overview"\u003e\u003c/p\u003e\n\u003ch3 id="settings"\u003eSettings\u003c/h3\u003e\n\u003cp\u003eThe settings page allows you to configure the machinery. You can define the type of camera, post-processes, conditions and much more; it\u0026rsquo;s highly configurable.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/web/settings.png" alt="web settings"\u003e\u003c/p\u003e\n\u003ch3 id="system"\u003eSystem\u003c/h3\u003e\n\u003cp\u003eThe system page allows you to monitor the system. On this page you\u0026rsquo;ll get an overview of the system specifications (CPU, Memory, Network, etc). Several actions are available: you can download system information (for debugging purposes) and download or remove your images.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/web/system.png" alt="web system"\u003e\u003c/p\u003e\n\u003ch2 id="project-structure"\u003eProject structure\u003c/h2\u003e\n\u003cp\u003eThe web interface is using the Laravel framework (version 5.4). There is a lot of documentation related to Laravel, please review \u003ca href="https://laravel.com/docs/5.4"\u003etheir documentation website here\u003c/a\u003e. In a nutshell this is how the web is organised.\u003c/p\u003e\n\u003ch3 id="back-end"\u003eBack-end\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003econfig/app.php - general application settings.\u003c/li\u003e\n\u003cli\u003econfig/kerberos.php - this file contains web specific parameters; the user credentials to sign in, etc.\u003c/li\u003e\n\u003cli\u003eapp/Http/Controllers - MVC controllers\u003c/li\u003e\n\u003cli\u003eapp/Http/Repositories -repositories are injected into the controller.\u003c/li\u003e\n\u003cli\u003eapp/Providers/AppServiceProvider.php - bind repositories to a specific interface - dependency injection.\u003c/li\u003e\n\u003cli\u003eroutes/api.php - contains all the URI endpoints for Ajax calls.\u003c/li\u003e\n\u003cli\u003eroutes/web.php - url routing for pages.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="front-end"\u003eFront-end\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003epublic/css/less - LESS is used for the CSS.\u003c/li\u003e\n\u003cli\u003epublic/js/app - BackboneJS and RequireJS is used for building modular JS classes.\u003c/li\u003e\n\u003cli\u003epublic/js/mustache - Mustache is used for the client-side view rendering.\u003c/li\u003e\n\u003cli\u003epublic/js/vendor - This is where the bower extensions are installed.\u003c/li\u003e\n\u003cli\u003epublic/capture - A directory where images are written to by default.\u003c/li\u003e\n\u003cli\u003epublic/bower.json - The bower extensions used in the web repository.\u003c/li\u003e\n\u003cli\u003epublic/Gruntfile.js - We are using Grunt for our task manager.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="api"\u003eAPI\u003c/h2\u003e\n\u003cp\u003eIf you want to integrate the Kerberos agent with your own application, you\u0026rsquo;re at the right place! The web interface comes with a RESTfull API, that allows you to retrieve and modify information from the Kerberos agent.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDisable the machinery\u003c/li\u003e\n\u003cli\u003eHealth check\u003c/li\u003e\n\u003cli\u003eEnable or disable output devices\u003c/li\u003e\n\u003cli\u003eetc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="authentication"\u003eAuthentication\u003c/h3\u003e\n\u003cp\u003eTo use the RESTfull API of your Kerberos agent you need to define an Authorization header with each request. We use Basic Authentication to secure the different endpoints.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e\u0026quot;Authorization\u0026quot;: \u0026quot;Basic root:root\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAn example with Python looks like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-python"\u003eimport requests\nimport json\nimport base64\nurl = \u0026quot;http://ip-of-pi/api/v1/condition/enabled\u0026quot;\nusername = \u0026quot;user\u0026quot;\npassword = \u0026quot;passw\u0026quot;\nbasicAuth = base64.b64encode(\'%s:%s\' % (username, password))\nheaders = {\u0026quot;Authorization\u0026quot;: \u0026quot;Basic \u0026quot; + basicAuth, \u0026quot;Content-Type\u0026quot;: \u0026quot;application/json\u0026quot;}\ndata = \'{\u0026quot;active\u0026quot;: \u0026quot;true\u0026quot;}\'\n#Call REST API\nresponse = requests.put(url, data=data, headers=headers)\nprint(response.text)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you\u0026rsquo;re using the wrong credentials, the web will return following error message.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-text"\u003eInvalid credentials.\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="endpoints"\u003eEndpoints\u003c/h3\u003e\n\u003cp\u003eAll endpoints are prefixed with api/v[version]/, in which the last part defines the API version number. Below you will find all the available endpoints with there signature and response. Note that when you call an endpoint which doesn\u0026rsquo;t exists, the web will throw an 404.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n	\u0026quot;error\u0026quot;: \u0026quot;API method does not exists\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="version-1"\u003eVersion 1\u003c/h3\u003e\n\u003cp\u003eBelow you\u0026rsquo;ll find a list of all API methods which are available for version 1.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eGET api/v1/name\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRetrieve the name of your instance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n	\u0026quot;name\u0026quot;: \u0026quot;frontdoor\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ePUT api/v1/name\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eChange the name of your instance.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePayload\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n	\u0026quot;name\u0026quot;: \u0026quot;frontdoor-changed\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n	\u0026quot;name\u0026quot;: \u0026quot;frontdoor-changed\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eGET api/v1/images/latest_sequence\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eRetrieve the latest sequence detected.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e[\n    {\n        time: \u0026quot;10:59:57\u0026quot;,\n        src: \u0026quot;https://demo.kerberos.io/capture/1501491597_6-310145_frontdoor_722-691-873-926_703_511.mp4\u0026quot;,\n        local_src: \u0026quot;/var/www/web/public/capture/1501491597_6-310145_frontdoor_722-691-873-926_703_511.mp4\u0026quot;,\n        metadata: {\n            key: \u0026quot;1501491597_6-310145_frontdoor_722-691-873-926_703_511.mp4\u0026quot;,\n            user: \u0026quot;1501491597_6-310145_frontdoor_722-691-873-926_703_511.mp4\u0026quot;,\n            timestamp: 1501491597,\n            microseconds: \u0026quot;6-310145\u0026quot;,\n            instanceName: \u0026quot;frontdoor\u0026quot;,\n            regionCoordinates: \u0026quot;722-691-873-926\u0026quot;,\n            numberOfChanges: \u0026quot;703\u0026quot;,\n            token: \u0026quot;511\u0026quot;\n        },\n        type: \u0026quot;video\u0026quot;\n    }\n]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eGET api/v1/condition/enabled\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCheck if enabled or disabled.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n 	\u0026quot;active\u0026quot;: \u0026quot;true\u0026quot;,\n 	\u0026quot;delay\u0026quot;: \u0026quot;5000\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003ePUT api/v1/condition/enabled\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eActivate or disable the system.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePayload\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n 	\u0026quot;active\u0026quot;: \u0026quot;false\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n 	\u0026quot;active\u0026quot;: \u0026quot;false\u0026quot;,\n 	\u0026quot;delay\u0026quot;: \u0026quot;5000\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ccode\u003eGET api/v1/system/health\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCheck if the machinery is running (the stream is connected).\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eResponse\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-json"\u003e{\n 	\u0026quot;status\u0026quot;: \u0026quot;false\u0026quot;\n}\n\u003c/code\u003e\u003c/pre\u003e\n'},{id:14,href:"/opensourcev3/announcement/",title:"Announcement",description:"",content:'\u003cp\u003eKerberos Open Source (v3) is the next generation of Kerberos.io, and is the successor of (v1/v2). More specifically it will replace and merge the \u003ca href="https://github.com/kerberos-io/machinery"\u003emachinery\u003c/a\u003e and \u003ca href="https://github.com/kerberos-io/web"\u003eweb\u003c/a\u003e repositories. A switch in technologies and architecture has been made. Version 3 is still under active development, and not yet released. The progress can be followed at the \u003ca href="https://github.com/kerberos-io/opensource/tree/develop"\u003edevelop branch\u003c/a\u003e and \u003ca href="https://github.com/kerberos-io/opensource/projects/1"\u003eproject overview\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="what-is-changing"\u003eWhat is changing?\u003c/h2\u003e\n\u003cp\u003eAt the bottom line, we are rebuilding the project from scratch using a different technology stack. We are saying goodbye to C++, PHP (Laravel), BackboneJS and saying hello to Golang and React. Despite the technology changes, we are also changing the architecture, we have put in place a couple of years ago. The biggest change is to run the show inside a single repository, and no longer over seperate repos (machinery and web). Read more about this in the FAQ.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../public/images/kerberos-agent-v2-v3.png" alt="Kerberos Open Source v2 - vs - v3"\u003e\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003ch3 id="1-why-a-mono-repo"\u003e1. Why a mono repo?\u003c/h3\u003e\n\u003cp\u003eWe have noticed in the past (v1 and v2) splitting the repositories (machinery and web), created a lot of confusion within our community. People didn\u0026rsquo;t understand the different versions and so on. This caused a lack of collaboration, and made it impossible for some people to collaborate and contribute.\u003c/p\u003e\n\u003cp\u003eHaving a mono repo, which is well organised, simplifies the entry point for new people who would like to use, understand and/or contribute to Kerberos Open Source.\u003c/p\u003e\n\u003ch3 id="2-why-a-change-in-technologies"\u003e2. Why a change in technologies?\u003c/h3\u003e\n\u003cp\u003eIn previous versions (v1 and v2) we used technologies like C++, PHP and BackboneJS. 7 years ago this was still acceptable, however time has changed and new technologies such as React and Golang became very popular.\u003c/p\u003e\n\u003cp\u003eDue to previous reason we have decided to rebuild the Kerberos Open Source technology from scratch, taking into account all the feedback we acquired over the years. Having these technologies available, we will enable more people to contribute and use our technology.\u003c/p\u003e\n\u003ch3 id="3-what-is-the-difference-with-kerberos-enterprise"\u003e3. What is the difference with Kerberos Enterprise?\u003c/h3\u003e\n\u003cp\u003eWe started the developments of Kerberos Enterprise a year ago (January, 2020), our focus here was scalability, and fast development and easy deployment. We noticed that with technologies such as Golang and React, we can still provide a highly performant video surveillance system.\u003c/p\u003e\n\u003cp\u003eKerberos Open Source will use the same technology stack, and some code pieces, of Kerberos Enterprise which we have already build. We have a very clear now, of how a well developed and documented video surveillance system needs to look like.\u003c/p\u003e\n\u003ch3 id="4-when-are-we-going-to-be-able-to-install-the-first-version"\u003e4. When are we going to be able to install the first version?\u003c/h3\u003e\n\u003cp\u003eWe plan to ship the \u003cstrong\u003efirst version by the end of Q1\u003c/strong\u003e, afterwards we will add more and more features as usual.\u003c/p\u003e\n\u003ch3 id="5-change-in-license"\u003e5. Change in License\u003c/h3\u003e\n\u003cp\u003eKerberos Open Source (v3) is now available under the MIT license.\u003c/p\u003e\n'},{id:15,href:"/enterprise/first-things-first/",title:"First things first2",description:"",content:'\u003cp\u003eOver the years Kerberos evolved into a mature and stable solution. Lots of people and companies started to adopt the system, and requested enhancements. Despite the fact that Kerberos Open Source is stable and feature rich, every\nsolution has its limitations, especially if you aim to scale it.\u003c/p\u003e\n\u003cp\u003eThat being said, Kerberos Open Source is perfect when monitoring a limited set of surveillance cameras, but it doesn\u0026rsquo;t scale well if you plan to monitor dozens or hundreds of surveillance cameras. Although Kerberos Open Source ships\nas a Docker image, it has no high availability or fail over functionality.\u003c/p\u003e\n\u003cp\u003eIndependent from that we\u0026rsquo;ve seen many vendors developing their own custom VMS solutions, usually tightly coupled to there proprietary surveillance hardware, which are delivered to enterprise customers as closed software solutions with limited API\u0026rsquo;s and/or messaging capabilities.\u003c/p\u003e\n\u003cp\u003eDue to these reasons we have developed Kerberos Enterprise, Kerberos Storage and Kerberos Cloud, which is an open scalable solution stack, suitable for your ever growing video surveillance landscape, but having extensibility and integration built-in from the ground up.\u003c/p\u003e\n\u003cp\u003eThe major key differentiators compared to to other solutions are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eScalability with Kubernetes,\u003c/li\u003e\n\u003cli\u003eOpen API\u0026rsquo;s with well documented Swagger API\u0026rsquo;s,\u003c/li\u003e\n\u003cli\u003eHost anywhere, in the cloud or on premise,\u003c/li\u003e\n\u003cli\u003eIntegration and extension, allowing to build custom apps, ML services and more.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/405037695" width="640" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003cbr/\u003e\u003cbr/\u003e\n\u003ch2 id="kubernetes"\u003eKubernetes\u003c/h2\u003e\n\u003cp\u003eTo provide our customer with the high availability and fail over requirements they have, Kerberos Enterprise was built on top of Kubernetes (k8s). This container orchestrator allows us to scale a video surveillance landscape horizontally, and deliver a never-seen high available video surveillance system.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-agent-architecture-kubernetes.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eKerberos Enterprise is installed inside a Kubernetes cluster. It will create pods/deployments for every surveillance camera you want to monitor. Kubernetes will scale and distrubute these pods across your nodes (VM\u0026rsquo;s/Baremetal machines).\u003c/p\u003e\n\u003cp\u003eNodes inside your cluster can fail or crash, Kubernetes will make sure the Kerberos pods running on the failed nodes will be deployed to healthy node. This, to make sure the monitoring of your video surveillance cameras continues seamlessly.\u003c/p\u003e\n\u003cp\u003eBy having the power to add nodes to your cluster, you can anticipate to the ever growing need of your surveillance cameras. With the Kubernetes tools you can monitor your cluster and get into the details.\u003c/p\u003e\n\u003ch2 id="cloud-or-on-premise"\u003eCloud or on premise\u003c/h2\u003e\n\u003cp\u003eYou install Kerberos Enterprise inside a Kubernetes cluster, but there are no limitations where this cluster will be actually running. This means that whatever security policy you have within your company, you can run it where you want: on-premise, public cloud, private cloud, etc.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-agent-architecture-kubernetes-cloud.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003ch2 id="licensing"\u003eLicensing\u003c/h2\u003e\n\u003cp\u003eKerberos Enterprise is publicly available and \u003cstrong\u003edoes not\u003c/strong\u003e require a license key to operate correctly. Everyone can install the Kerberos Enterprise component free of charge.\u003c/p\u003e\n'},{id:16,href:"/vault/first-things-first/",title:"First things first3",description:"",content:'\u003cp\u003eKerberos Open Source and Kerberos Enterprise both store recordings on the local disk. To centralise your data at a single place, additional solutions are available.\u003c/p\u003e\n\u003ch2 id="the-options"\u003eThe options\u003c/h2\u003e\n\u003ch3 id="kerberos-cloud"\u003eKerberos Cloud\u003c/h3\u003e\n\u003cp\u003eOne or more Kerberos Enterprise agents, can store their data directly on \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e, and benefit from the visualisation layer Kerberos Cloud offers. When doing this your recordings will be uploaded inside the Kerberos datacenter (which is a black box for you).\u003c/p\u003e\n\u003ch3 id="kerberos-storage"\u003eKerberos Storage\u003c/h3\u003e\n\u003cp\u003eIn addition to that you have the option to Bring Your Own Storage (BYOS), using Kerberos Storage. Kerberos Storage allows you to configure the storage providers you want, and allows you to connect to \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e in parrallel. These storage provider could live in the cloud such as AWS S3, GCP storage and Azure Blob store, or can be located on premise - at the edge - such as Minio.\u003c/p\u003e\n\u003cp\u003eDespite the flexible storage capabilities, Kerberos Storage is also an open platform, which can be used to build extensions (mobile apps, web apps, machine learning services, etc) and integrations. It allows you to leverage a scalable and stable system as a strong backbone for your video analytics solutions, machine learning algorithms, and more.\u003c/p\u003e\n\u003ch2 id="kerberos-cloud-1"\u003eKerberos Cloud\u003c/h2\u003e\n\u003cp\u003eWithin Kerberos Open Source an Kerberos Enterprise you can upload your recordings to our \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e environment. This means that your data will be hosted and processed (metadata) in our Kerberos datacenter. For more information about how Kerberos Cloud works \u003ca href="/cloud"\u003ecan be found here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-architecture.png" alt="cloud"\u003e\u003c/p\u003e\n\u003ch2 id="kerberos-storage-1"\u003eKerberos Storage\u003c/h2\u003e\n\u003cp\u003eIf you are using Kerberos Enterprise you have the possibility to bring your own cloud storage or on premise storage. By installing Kerberos Storage you can send your recordings to your own datacenter, private or public cloud. Following providers are supported:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://cloud.google.com/storage"\u003eGoogle Cloud Platform Storage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://azure.microsoft.com/en-us/services/storage/"\u003eMicrosoft Azure Storage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://aws.amazon.com/s3/"\u003eAmazon Web Services S3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://min.io/"\u003eMinio\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhen installing Kerberos Storage in the cloud, following architecture can apply. Having your Kerberos Enterprise agents running at the edge, but uploading to Kerberos Storage in the cloud.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-architecture-kubernetes-cloud.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eOn the other hand you could also have Kerberos Storage running at the edge, next to your Kubernetes Enterprise agents. This could be useful if you want to do processing or video analytics suchs as computer bision or machine learning at the edge.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-architecture-kubernetes-edge.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003ch3 id="events"\u003eEvents\u003c/h3\u003e\n\u003cp\u003eOne of the key differentiators compared to other VMS solutions, is the abilitity to extend and integrate. Next to uploading and persisting data, Kerberos Storage can also trigger events. Each time a recording is send to Kerberos Storage an event can be triggered through one of the following providers.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://kafka.apache.org/"\u003eApache Kafka\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://aws.amazon.com/sqs/"\u003eAmazon Web Services SQS\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThose events can be fetched or subscribed by custom applications. For example, one can create a notifications service, machine learning service or an entire cloud application. Allowing you to leverage the power and scalability of Kerberos Enterprise, and building and focussing on your specific applications, API\u0026rsquo;s, mobile apps, or whatever you have in mind to build.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage.png" alt="architecture storage"\u003e\u003c/p\u003e\n\u003ch3 id="on-demand-upload"\u003eOn-Demand upload\u003c/h3\u003e\n\u003cp\u003eNext to the extension and integration capabilities of Kerberos Storage, we are currently working on a feature called On-Demand upload. On-Demand upload allows you to upload a subset of your recordings to a Kerberos Storage in the cloud.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-architecture-kubernetes-ondemand-storage.png" alt="kerberos-on-demand"\u003e\u003c/p\u003e\n\u003cp\u003eA couple of usecases are the following ones:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eContinious recording: having continious recordings stored in your Kerberos Storage on premise, you don\u0026rsquo;t want to replicate all your recordings to a Kerberos Storage provider in the cloud (to make them public available). Therefore you could implement custom logic, for example based on a machine learning algorithm, to only replicate recordings which matche a specific scenario.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOn-Demand request: Having Kerberos Cloud, an end-user could initiate a request for upload. By default no recordings are forwarded from your Kerberos Storage on premise to your Kerberos Storage in the cloud. Only when an end user requests one or more recordings, the\nupload will start for the requested recordings.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="open-api"\u003eOpen API\u003c/h3\u003e\n\u003cp\u003eBoth Kerberos Enterprise as Kerberos Storage ships with Swagger API\u0026rsquo;s, which can be used to communicate with the previously mentioned systems. Simply type \u003ccode\u003e/swagger/index.html\u003c/code\u003e after the \u003ccode\u003eapi\u003c/code\u003e url, and you will see the Swagger UI popping up. No need to explain the different API\u0026rsquo;s, use the Swagger and see what is available. See something missing, let us know, and we add it ;).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-swagger.png" alt="swgger storage"\u003e\u003c/p\u003e\n\u003ch2 id="licensing"\u003eLicensing\u003c/h2\u003e\n\u003cp\u003eKerberos Storage is publicly available and \u003cstrong\u003erequires a license key\u003c/strong\u003e to operate correctly. Reach out to \u003cstrong\u003ecedric@verstraeten.io\u003c/strong\u003e for the commercial matters.\u003c/p\u003e\n'},{id:17,href:"/hub/first-things-first/",title:"First things first4",description:"",content:""},{id:18,href:"/enterprise/get-started/",title:"Get Started2",description:"",content:'\u003cp\u003eOnce you\u0026rsquo;ve installed Kerberos Enterprise, you will have the Kerberos Enterprise Factory webapp running inside your cluster. This web application allows you to administrate your Kerberos Enterprise agents as deployments/pods. It comes a bunch of other features as well, read on.\u003c/p\u003e\n\u003cp\u003eImportant to note is that this web app is relying on the Golang Kubernetes SDK, so that means from an administration point of view, you could simply use the well known \u003ccode\u003ekubectl\u003c/code\u003e command. The webapp just add (a lot of) functionalities on top of the Kubernetes API, which are specific to Kerberos Enterprise agents.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/405039357" width="640" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003cbr/\u003e\u003cbr/\u003e\n\u003ch2 id="login-page"\u003eLogin page\u003c/h2\u003e\n\u003cp\u003eOnce you open a browser, and navigate to the Factory web application (see installation for the url), you will land on the login page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/login.gif" alt="Factory"\u003e\u003c/p\u003e\n\u003cp\u003eThe default username password of the Factory web applications is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eusername: \u003cstrong\u003eroot\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003epassword: \u003cstrong\u003ekerberos\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe username and password \u003ca href="https://github.com/kerberos-io/enterprise/blob/master/yaml/factory/deployment.yaml#L54"\u003ecan be changed in the \u003ccode\u003edeployment.yaml\u003c/code\u003e file\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="overview"\u003eOverview\u003c/h2\u003e\n\u003cp\u003eOn the overview page you will find an intuitive overview of the different pages and functionalities. On the left menu you will see two sections: \u003cstrong\u003eDocker\u003c/strong\u003e and \u003cstrong\u003eKubernetes\u003c/strong\u003e. Kerberos Enterprise can both run in Docker (single-host) and Kubernetes (cluster) mode, however the recommended way is of course Kubernetes.\u003c/p\u003e\n\u003cp\u003eWhen working with Kubernetes, Kerberos Enterprise agents are deployed as a deployment. When working with Docker, Kerberos Enterprise agents are deployed as traditional Docker containers.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/docker-kubernetes.gif" alt="Factory"\u003e\u003c/p\u003e\n\u003ch2 id="kubernetes"\u003eKubernetes\u003c/h2\u003e\n\u003cp\u003eOn the left menu you will find the Kubernetes section. In this section 3 sub menu\u0026rsquo;s are available:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNodes: a list of all the nodes in your cluster.\u003c/li\u003e\n\u003cli\u003eDeployments: a list of all the Kerberos Enterprise agents running in your cluster.\u003c/li\u003e\n\u003cli\u003ePods: all the pods running in your cluster.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="nodes"\u003eNodes\u003c/h2\u003e\n\u003cp\u003eThe nodes section lists all the available nodes inside your Kubernetes cluster. It shows a limited amount of information such as the version, the number of Docker images installed on the node, and some basic hardware information.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-nodes.png" alt="Factory"\u003e\u003c/p\u003e\n\u003ch2 id="deployments"\u003eDeployments\u003c/h2\u003e\n\u003cp\u003eThe deployments section will list all the Kerberos Enterprise agents (running as deployments) that you have deployed inside your cluster. This page gives you access to deploy new Kerberos Enterprise agents one by one or in bulk. Next to that you can easily upgrade Kerberos Enterprise agents to a newer version, reboot them, view logging and update the configuration options of the Kerberos Enterprise agent.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-deployments.png" alt="Factory"\u003e\u003c/p\u003e\n\u003ch3 id="adding-a-new-deployment"\u003eAdding a new deployment\u003c/h3\u003e\n\u003cp\u003eThere are two options to add a new deployment, single deployments and bulk deployment.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/single-bulk-deployment.gif" alt="Factory"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esingle deployment\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy specifying a name for your deployment and it\u0026rsquo;s corresponding RTSP url, a new deployment will be created for you, and deployed to one of your installed nodes.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ein bulk deployment.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy importing an Excel file, deployments can be created in bulk.\u003c/p\u003e\n\u003cp\u003eBy specifying the name and corresponding RTSP url in multiple rows, you can deploy your deployments in bulk.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-add-bulk-deployment-excel.png" alt="Factory"\u003e\u003c/p\u003e\n\u003ch3 id="configuring-a-deployment"\u003eConfiguring a deployment\u003c/h3\u003e\n\u003cp\u003eOnce you have a running deployment, you should see a green circle next to the deployment, indicating that it is succesfully running. At any time you can configure your deployments by clicking on the \u003cSettingsIcon className="pointer"/\u003e icon. This will open a popup, allowing you to change some settings.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/deployment-configuration.gif" alt="Factory"\u003e\u003c/p\u003e\n\u003cp\u003eFollowing settings can be changed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOne or more regions of interest,\u003c/li\u003e\n\u003cli\u003eTime based conditions,\u003c/li\u003e\n\u003cli\u003ePre- and postrecording\u003c/li\u003e\n\u003cli\u003eContinious recording\u003c/li\u003e\n\u003cli\u003eLinking to \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e or \u003ca href="/storage/introduction"\u003eKerberos Storage\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id="global-configuration"\u003eGlobal configuration\u003c/h3\u003e\n\u003cp\u003eConfiguration can be specified on a Kerberos Enterprise agent level, this means that you update the configuration of a specific deployment. However can also be specified at a higher level. This higher level is what we call the global configuration.\u003c/p\u003e\n\u003cp\u003eBy specifying configurations at a higher level, any Kerberos Enterprise agents will inherit from that configuration, improving the overall maintenance and management of your Kerberos Enterprise agents.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/global-configuration.gif" alt="Factory Global Config"\u003e\u003c/p\u003e\n\u003ch3 id="upgrade-or-reboot-a-kerberos-enterprise-agent"\u003eUpgrade or reboot a Kerberos Enterprise agent\u003c/h3\u003e\n\u003cp\u003eAt Kerberos.io we have fast development cycles, which means that new versions will be released every day, week or month. To make sure you can upgrade or downgrade your Kerberos Enterprise agent easily, an upgrade feature is built-in. When pressing the upgrade button, you will be able to select the version to which you would like to upgrade or downgrade. Once submitted, \u003cstrong\u003ea zero downtime upgrade will take place\u003c/strong\u003e. Kubernetes will download the new release, create a new pod, and destroy the old one.\u003c/p\u003e\n\u003cp\u003eAt any moment you can reboot your Kerberos Enterprise agent. When pressing the reboot button, next to your deployment, Kubernetes will destroy the pod of your deployment, and schedule a new one. This comes in handy, when you noticed one of your Kerberos Enterprise agents is in a stale state.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/upgrade-reboot.gif" alt="Upgrade and reboot"\u003e\u003c/p\u003e\n\u003ch2 id="pods"\u003ePods\u003c/h2\u003e\n\u003cp\u003eWhen creating a Kerberos Enterprise agent, Kubernetes will create a deployment and schedule a pod. This pod will be  managed by your deployment, and deployed as a Docker container to one of your available nodes. Once a pod dies/ crashes, or whatever unexpected scenario, the deployment will make sure it is deployed again to a different (or the same) node. This makes sure the Kerberos Enterprise agent is in a healthy state at all times.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-pods.png" alt="Factory"\u003e\u003c/p\u003e\n\u003ch2 id="storage-and-video-management"\u003eStorage and video management\u003c/h2\u003e\n\u003cp\u003eKerberos Enterprise allows you to scale your video landscape horizontally, using the concept of Kubernetes, and brings a strong backbone for stability and performance. It allows you to avoid reinventing the wheel, and get stuck in the numerious challenges of making an intelligent VMS yourself (we worked on this for 2 years with experienced engineers).\u003c/p\u003e\n\u003cp\u003eKerberos Enterprise stores its recordings locally for a short amount of time. This means that long-term storage is not included in the solution. On top of that it also \u003cstrong\u003edoes not\u003c/strong\u003e have a visual component, which allows you te review dashboards or recordings. To overcome these two challenges, long-term storage with extensibility/integration capabilities and visualisation features, following solutions were developed \u003ca href="/storage/introduction"\u003eKerberos Storage\u003c/a\u003e and \u003ca href="/cloud"\u003eKerberos Cloud\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id="kerberos-storage"\u003eKerberos Storage\u003c/h3\u003e\n\u003cp\u003e\u003ca href="/storage/introduction"\u003eKerberos Storage\u003c/a\u003e is a solution which makes it able to store recordings from Kerberos Enterprise agents (accross different clusters) at a central place, on the storage provider you want. You can store your recordings in the cloud (AWS S3, Google Cloud Storage, Azure Blob storage) or on premise (Minio).\u003c/p\u003e\n\u003cp\u003eOn the other hand it\u0026rsquo;s an open platform, as it allows you build extensions and integrations (web apps, mobile apps, machine learning services much more). Kerberos Storage ships with the ability of real-time messaging (Kafka) and a REST API (documented as Swaggger).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage.png" alt="architecture storage"\u003e\u003c/p\u003e\n\u003cp\u003eTo connect one or more Kerberos Enterprise agents to your Kerberos Storage instance, you should open the configuration option and navigate to the \u003ccode\u003ecloud\u003c/code\u003e tab. Once selected you need to fill-in the credentials from your Kerberos Storage account.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eStorage URI: this is the API endpoint of your Kerberos Storage instance. Typically this is in the following format: \u003ccode\u003ehttp(s)://api.yourdomain.com/storage\u003c/code\u003e. Where \u003ccode\u003eapi.yourdomain.com\u003c/code\u003e should match your Kerberos Storage API endpoint.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eProvider: the name of the provider, which you created on the Kerberos Storage providers page, to which you want to send your recordings to.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDirectory: this is the subdirectory in which your files will be stored. At the time of writing this should also equal your Kerberos Cloud username, if you plan to upload to Kerberos Cloud.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAccess Key: this should match the access key of one of your Kerberos Storage accounts.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSecret Access Key: this should match the secret access key of one of your Kerberos Storage accounts.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-enterprise-storage-setup.gif" alt="kerberos storage configuration"\u003e\u003c/p\u003e\n\u003ch3 id="kerberos-cloud"\u003eKerberos Cloud\u003c/h3\u003e\n\u003cp\u003eFor the visualisation part Kerberos Cloud comes into the picture. Kerberos Cloud is a web app, backed up with a number of microservices, that shows dashboards, live streams, filter recordings and much more. Learn more \u003ca href="/cloud"\u003eabout the features and functions here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eYou have two choices when using Kerberos Cloud, either you send your recordings from your Kerberos Enterprise agents directly to Kerberos Cloud, or you send your recordings to Kerberos Storage, and connect Kerberos Storage to Kerberos Cloud. About the latter more is explained on the \u003ca href="/storage/get-started"\u003eKerberos Storage page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSelect the Kerberos Cloud option, and copy-paste the credentials from your Kerberos Cloud subscription.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-enterprise-to-cloud.gif" alt="kerberos storage configuration"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRegion: this is the region where your recordings will be stored. Only \u003ccode\u003eeu-west-1\u003c/code\u003e for now (will change, on the roadmap).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBucket: the name of the Kerberos Cloud bucket.  Only \u003ccode\u003ekerberosaccept\u003c/code\u003e for now (will change, on the roadmap).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDirectory: this is your personal directory, and matches your Kerberos Cloud username.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePublic Key: this should match the public key of your Kerberos Cloud subscription.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSecret Access Key: this should match the private key of your Kerberos Cloud subscription.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:19,href:"/vault/get-started/",title:"Get Started3",description:"",content:'\u003cp\u003eOnce you\u0026rsquo;ve installed Kerberos Storage, you will have the Kerberos Storage web app running. This web app allows you to administrate Kerberos Storage. You can add storage providers, queues, accounts, and more from a single interface. Isn\u0026rsquo;t that great.\u003c/p\u003e\n\u003cp\u003eDespite exposing a web app, Kerberos Storage also ships with a number of API\u0026rsquo;s. These API\u0026rsquo;s are exposed as, Swagger documentation, and can be used for extension and integration usecases. Think about following usecase..\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHaving a couple of Kerberos Enterprise clusters installed, you could bring the recording of all your recordings at a single place. Next to that you would like to process every single recording being uploaded.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHaving storage is just one thing, processing it with your own programming logical is what makes value.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUsing the concept of Queues, you could integrate with a Kafka queue, and receive real-time messages everytime a recording wa succesfully uploaded. Starting to process the different messages, you know which recordings were uploaded, and you can request the raw recording from Kerberos Storage, using one of it\u0026rsquo;s API\u0026rsquo;s. You could do with the recording what you want, in the programming language you prefer, and send the outcome of for example your highly customized machine learning algorithm to your own video analytics hub.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eA \u003ca href="https://github.com/kerberos-io/storage/tree/master/examples/kafka-handler"\u003econcrete tutorial can be found here\u003c/a\u003e, it explains how to connect to Kerberos Storage, and run a color detection algorithm.\u003c/p\u003e\n\u003ch2 id="login-page"\u003eLogin page\u003c/h2\u003e\n\u003cp\u003eOnce you open a browser, and navigate to the Kerberos Storage web app (see installation for the URL), you will land on the login page.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/login.gif" alt="Storage - Login"\u003e\u003c/p\u003e\n\u003cp\u003eThe default username and password of the Kerberos Storage app is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eusername: \u003cstrong\u003eroot\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003epassword: \u003cstrong\u003ekerberos\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe username and password can be changed in the \u003ccode\u003edeployment.yaml\u003c/code\u003e file.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id="license-key"\u003eLicense key\u003c/h2\u003e\n\u003cp\u003eThe first time you login you are asked for a license key, this can be obtained by sending a request to cedric@verstraeten.io, more information will be shared publicly soon. An example license key looks like this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026mdash;\u0026ndash;BEGIN LICENSE KEY\u0026mdash;\u0026ndash;\nL/+DAwEBB2xpY2Vuc2UB/4QAAQIBB1BheWxvYWQBCgABCVNpZ25hdHVyZQEKAAAA\n/9z/hAFUPBAADG1haW4uTGljZW5zZf+BAwEBB0xpY2Vuc2UB/4IAAQIBB0NvbXBh\nbnkBDAABB0V4cFRpbWUBBAAAABb/ghMBCmtlcmJlcm9zaW8B/MC7ZzIAAf+AOaJ+\n8eU3OlZCphr4uJyH/PzfuDkMrqyfIsutc5kSz3rjsRtU4e6vETpHre8CPvFyx5w2\n0O8PKCIR4z1q28qJK2cvHQTK0/zf+KfYLilEcmNczLXgg+bnPvtA/bU/K8ZEwbnw\nRta3+8zId+xtYQApdmHwo/Ih/vCN579iDeunwVQA\n\u0026mdash;\u0026ndash;END LICENSE KEY\u0026mdash;\u0026ndash;\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/licensekey.gif" alt="Storage - License Key"\u003e\u003c/p\u003e\n\u003cp\u003eOnce you received a license key, and entered it into the web app you will be redirected to the login screen. Enter your credentials again, and you will land on the providers page (read more about it in the next chapter).\u003c/p\u003e\n\u003ch2 id="providers"\u003eProviders\u003c/h2\u003e\n\u003cp\u003eProviders are the actual datasource where you want to store your recordings. These providers could be a storage provider in the cloud or a storage provider on premise.  By adding a provider, you have to provide credentials that allow Kerberos Storage to store recordings in that specific provider. Following provider are currently supported. You can choose from:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://cloud.google.com/storage"\u003eGoogle Cloud Platform Storage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://azure.microsoft.com/en-us/services/storage/"\u003eMicrosoft Azure Storage\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://aws.amazon.com/s3/"\u003eAmazon Web Services S3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href="https://min.io/"\u003eMinio\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs explained before, for each provider, the appropriate security settings has to be filled in. For example for AWS you need to define the access and secret key, for GCP you need to define a service account.\u003c/p\u003e\n\u003cp\u003eAdditionaly a provider can be marked as temporary. This is helpful if you wish to store your recordings for a short period, and want to use it for processing purpose only. A benefit of doing this is reducing costs (if you host in the public cloud).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/provider.gif" alt="Storage - Provider"\u003e\u003c/p\u003e\n\u003ch2 id="queues"\u003eQueues\u003c/h2\u003e\n\u003cp\u003eEvents or messages are generated each time a recording was uploaded to Kerberos Storage. These messages can be send to one ore more message brokers such as Apache Kafka or AWS SQS. From the interface you can setup the connection, and once configured events will flow to your predefined message brokers.\u003c/p\u003e\n\u003cp\u003eAn example or usecase of Queues is already discussed at the beginning of this page. Another usecase is the development of our Kerberos Cloud offering. Each time a Kerberos Cloud customer is sending recordings to his or her Kerberos Cloud profile, it is stored inside Kerberos Storage, and \u003ca href="/storage/get-started#providers"\u003ethus in one of our predefined providers\u003c/a\u003e. After storing successfully, a real-time message is send into our private Kafka broker, which is starting a chain of processing in sequence but also in parallel:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMetadata storage in MongoDB,\u003c/li\u003e\n\u003cli\u003eNotifications,\u003c/li\u003e\n\u003cli\u003eClassification with Tensorflow,\u003c/li\u003e\n\u003cli\u003eCounting algorithms,\u003c/li\u003e\n\u003cli\u003eand much more.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/queue.gif" alt="Storage - Queue"\u003e\u003c/p\u003e\n\u003ch2 id="accounts"\u003eAccounts\u003c/h2\u003e\n\u003cp\u003eHaving setup a \u003ccode\u003eProvider\u003c/code\u003e and a \u003ccode\u003eQueue\u003c/code\u003e, you also need to configure an account to interact with Kerberos Storage in a safe context. Creating an account allow you to do this. An account is the access point for end users to interact with your Kerberos Storage instance. On the Account page you can create one or more accounts and specify credentials for authentication and specific setting for authorization.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAllowed providers,\u003c/li\u003e\n\u003cli\u003eProvider directory\u003c/li\u003e\n\u003cli\u003ePublic Key,\u003c/li\u003e\n\u003cli\u003eSecret Key,\u003c/li\u003e\n\u003cli\u003eDay limit (the number of days a recording is stored.)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo just a short recap, an account allows something or someone to interact with Kerberos Storage, and store data in the authorized \u003ccode\u003eProviders\u003c/code\u003e and in an directory, the \u003ccode\u003eProvider directory\u003c/code\u003e, inside that \u003ccode\u003eProvider\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAs explained before, you can choose in which directory, the \u003ccode\u003eProvider directory\u003c/code\u003e, an account can store the recordings. By defining a  \u003ccode\u003eProvider directory\u003c/code\u003e you limit an account to have only access to this directory. On the other hand if you want to give an account more flexibility, and thus grant more access, you can use the \u003ccode\u003e*\u003c/code\u003e value for the \u003ccode\u003eProvider directory\u003c/code\u003e parameter. The latter will allow an account to write, in any subdirectory in the \u003ccode\u003eProvider\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOnce an account is created it can be used in Kerberos Enterprise (and soon Kerberos Open Source) to persist your data from your Kerberos Enterprise agent into your own \u003ccode\u003eProvider\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/account.gif" alt="Storage - Account"\u003e\u003c/p\u003e\n\u003ch2 id="media"\u003eMedia\u003c/h2\u003e\n\u003cp\u003eOnce a recording is stored inside a specific \u003ccode\u003eProvider\u003c/code\u003e it will show up on the \u003ccode\u003eMedia\u003c/code\u003e page. The \u003ccode\u003eMedia\u003c/code\u003e page is an overview, list page, of all your recordings being uploaded to a \u003ccode\u003eProvider\u003c/code\u003e. It is used for quickly reviewing activity as for recycling, for the latter read more at the next paragraph.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-media.png" alt="Storage"\u003e\u003c/p\u003e\n\u003ch2 id="recycle"\u003eRecycle\u003c/h2\u003e\n\u003cp\u003eStoring recordings in a \u003ccode\u003eProvider\u003c/code\u003e is one thing, making sure you manage the storage capacity of your \u003ccode\u003eProvider\u003c/code\u003e properly is also important. Storage might need to be recycled after a while because of several reasons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003emaybe the data is no longer relevant,\u003c/li\u003e\n\u003cli\u003edue to security or compliance,\u003c/li\u003e\n\u003cli\u003ereducing costs, etc.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo make this possible Kerberos Storage comes with a configurable recycle deployment, which you can run next to your Kerberos Storage deployment. \u003ca href="/storage/installation-recycle"\u003eLearn more about recycling here\u003c/a\u003e.\u003c/p\u003e\n'},{id:20,href:"/hub/get-started/",title:"Get Started4",description:"",content:""},{id:21,href:"/enterprise/installation/",title:"Installation2",description:"",content:'\u003cp\u003eKerberos Enterprise can be installed where Kubernetes can be installed. This means that it can run at the Edge - Baremetal -, in the cloud - VMs - or at Kubernetes service providers - SAAS - such as GCP, Azure, AWS, DigitalOcean, and the list goes on.\u003c/p\u003e\n\u003cp\u003eAlthough you might except Kubernetes at the Edge or Kubernetes in the cloud, there are no differences, well sorry to say there are. As Kubernetes service providers implemented features such as LoadBalancers, Persistent Volumes, and others, they have automated and integrated a huge portion of the Kubernetes stack with their related PAAS services. To be more concrete if you are running a Kubernetes Cluster on GCP, you will use the LoadBalancing and Storage services from GCP.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-enterprise-kubernetes.png" alt="enterprise kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eCompared to Kubernetes at the Edge, there are no predefined LoadBalancers, Storage capabilities, and more. This means more administration work for you, but - with great power comes great responsibility - so no worries. In the end there are alternative functionalties available, for features which you find out-of-the-box at the Kubernetes service providers, you just have to spend more time on configuring and installing those services/pods/deployments yourself.\u003c/p\u003e\n\u003ch2 id="installation-on-a-kubernetes-service-provider"\u003eInstallation on a Kubernetes Service Provider\u003c/h2\u003e\n\u003cp\u003eInstalling Kerberos Enterprise on a Kubernetes Service Provider (Azure, GCP, AWS) is straight forward, as you can create a Kubernetes cluster in a few clicks, get access to public Load Balancers, storage and more. Running Kerberos Enterprise in such a cluster is just a matter of copy-pasting some configuration (yaml) files, and executing some \u003ccode\u003ekubectl apply\u003c/code\u003e commands.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-agent-architecture-kubernetes-cloud.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eInstall Kerberos Enterprise on a Kubernetes Service Provider by \u003ca href="/enterprise/installation-cloud"\u003efollowing this step-by-step installation guide\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="installation-in-private-cloud-or-baremetal"\u003eInstallation in Private Cloud or Baremetal\u003c/h2\u003e\n\u003cp\u003eNo need to install Kerberos Enterprise on a Kubernetes Service Provider, you could install it on your own Kubernetes cluster in your private cloud, or even better inside your own premise. The closer you bring Kerberos Enterprise to your surveillance infrastructure, the more benefits you will experience (low latency, low bandwidth, etc).\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-agent-architecture-kubernetes.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eIn contradiction to the Kubernetes Service Provider, you will have some work todo. Setting up Kubernetes Cluster, play with MetalLB, Persistent Volumes and claims. Don\u0026rsquo;t be scared, it\u0026rsquo;s pretty ssttraight forward as well. You can\u0026rsquo;t simple expect a: click, click, 💥 approach.\u003c/p\u003e\n\u003cp\u003eInstall Kerberos Enterprise on a Private cloud or Baremetal by \u003ca href="/enterprise/installation-edge"\u003efollowing this step-by-step installation guide\u003c/a\u003e.\u003c/p\u003e\n'},{id:22,href:"/vault/installation/",title:"Installation3",description:"",content:'\u003cp\u003eKerberos Open Source (v3) is the next generation of Kerberos.io, and is the successor of (v1/v2). More specifically it will replace and merge the \u003ca href="https://github.com/kerberos-io/machinery"\u003emachinery\u003c/a\u003e and \u003ca href="https://github.com/kerberos-io/web"\u003eweb\u003c/a\u003e repositories. A switch in technologies and architecture has been made. Version 3 is still under active development, and not yet released. The progress can be followed at the \u003ca href="https://github.com/kerberos-io/opensource/tree/develop"\u003edevelop branch\u003c/a\u003e and \u003ca href="https://github.com/kerberos-io/opensource/projects/1"\u003eproject overview\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="what-is-changing"\u003eWhat is changing?\u003c/h2\u003e\n\u003cp\u003eAt the bottom line, we are rebuilding the project from scratch using a different technology stack. We are saying goodbye to C++, PHP (Laravel), BackboneJS and saying hello to Golang and React. Despite the technology changes, we are also changing the architecture, we have put in place a couple of years ago. The biggest change is to run the show inside a single repository, and no longer over seperate repos (machinery and web). Read more about this in the FAQ.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../public/images/kerberos-agent-v2-v3.png" alt="Kerberos Open Source v2 - vs - v3"\u003e\u003c/p\u003e\n\u003ch2 id="faq"\u003eFAQ\u003c/h2\u003e\n\u003ch3 id="1-why-a-mono-repo"\u003e1. Why a mono repo?\u003c/h3\u003e\n\u003cp\u003eWe have noticed in the past (v1 and v2) splitting the repositories (machinery and web), created a lot of confusion within our community. People didn\u0026rsquo;t understand the different versions and so on. This caused a lack of collaboration, and made it impossible for some people to collaborate and contribute.\u003c/p\u003e\n\u003cp\u003eHaving a mono repo, which is well organised, simplifies the entry point for new people who would like to use, understand and/or contribute to Kerberos Open Source.\u003c/p\u003e\n\u003ch3 id="2-why-a-change-in-technologies"\u003e2. Why a change in technologies?\u003c/h3\u003e\n\u003cp\u003eIn previous versions (v1 and v2) we used technologies like C++, PHP and BackboneJS. 7 years ago this was still acceptable, however time has changed and new technologies such as React and Golang became very popular.\u003c/p\u003e\n\u003cp\u003eDue to previous reason we have decided to rebuild the Kerberos Open Source technology from scratch, taking into account all the feedback we acquired over the years. Having these technologies available, we will enable more people to contribute and use our technology.\u003c/p\u003e\n\u003ch3 id="3-what-is-the-difference-with-kerberos-enterprise"\u003e3. What is the difference with Kerberos Enterprise?\u003c/h3\u003e\n\u003cp\u003eWe started the developments of Kerberos Enterprise a year ago (January, 2020), our focus here was scalability, and fast development and easy deployment. We noticed that with technologies such as Golang and React, we can still provide a highly performant video surveillance system.\u003c/p\u003e\n\u003cp\u003eKerberos Open Source will use the same technology stack, and some code pieces, of Kerberos Enterprise which we have already build. We have a very clear now, of how a well developed and documented video surveillance system needs to look like.\u003c/p\u003e\n\u003ch3 id="4-when-are-we-going-to-be-able-to-install-the-first-version"\u003e4. When are we going to be able to install the first version?\u003c/h3\u003e\n\u003cp\u003eWe plan to ship the \u003cstrong\u003efirst version by the end of Q1\u003c/strong\u003e, afterwards we will add more and more features as usual.\u003c/p\u003e\n\u003ch3 id="5-change-in-license"\u003e5. Change in License\u003c/h3\u003e\n\u003cp\u003eKerberos Open Source (v3) is now available under the MIT license.\u003c/p\u003e\n'},{id:23,href:"/hub/installation/",title:"Installation4",description:"",content:""},{id:24,href:"/enterprise/installation-cloud/",title:"Cloud Installation",description:"",content:'\u003cp\u003eStart by installing a Kubernetes cluster. This can be done on one of the hyperscalers (\u003cstrong\u003eAWS\u003c/strong\u003e, \u003cstrong\u003eGCP\u003c/strong\u003e or \u003cstrong\u003eAzure\u003c/strong\u003e),\ncloud providers (Digital Ocean, Scaleway, etc) or on-premise in your own private network.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/404813147" width="640" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003cbr/\u003e\u003cbr/\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eBefore setting up Kerberos Enterprise, some configuration needs to happen. First thing that we need to do is setting up the RBAC permissions (Role Based Access Control). We need to enable this to be able to query specific endpoints from the Kubernetes API. By default these endpoints are locked, so we need to unlock them.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/404767375" width="640" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003cbr/\u003e\u003cbr/\u003e\n\u003cp\u003eFirst clone the configrations from our Github repo.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/enterprise\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA best practice is to create a separate namespace for your enterprise deployment.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create namespace kerberos\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext go into the directory and execute the first Kubernetes configuration file \u003ccode\u003eclusterrole.yaml\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create -n kerberos -f ./enterprise/yaml/factory/clusterrole.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will make several actions inside your cluster available. We need this to be able to create deployments from the factory web app.\u003c/p\u003e\n\u003ch3 id="helm"\u003eHelm\u003c/h3\u003e\n\u003cp\u003eNext we will install a couple of dependencies which are required for Kerberos Enterprise. \u003ca href="https://helm.sh/"\u003e\u003cstrong\u003eHelm\u003c/strong\u003e\u003c/a\u003e is a package manager for Kubernetes, it helps you setting up services more easily (this could be a MQTT broker, a database, etc).\nInstead of writing yaml files for every service we need, we use so called \u003cstrong\u003eCharts\u003c/strong\u003e (libraries), that you can reuse and configure the,\nwith the appropriate settings.\u003c/p\u003e\n\u003cp\u003eUse one of the preferred OS package managers to install the Helm client:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebrew install helm\n\nchoco install kubernetes-helm\n\nscoop install helm\n\ngofish install helm\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="traefik"\u003eTraefik\u003c/h3\u003e\n\u003cp\u003e\u003ca href="https://containo.us/traefik/"\u003e\u003cstrong\u003eTraefik\u003c/strong\u003e\u003c/a\u003e is a reverse proxy and load balancer which allows you to expose your deployments more easily. Kerberos uses Traefik to expose it\u0026rsquo;s APIs more easily.\u003c/p\u003e\n\u003cp\u003eBy executing following helm command, we will install traefik and link it to a specific DNS name. Open the traefik values file, \u003ccode\u003e./enterprise/yaml/traefik/values.yaml\u003c/code\u003e, and update the DNS name to your own domain.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    dashboard:\n      enabled: true\n--\u0026gt;   domain: traefik.domain.com\n      serviceType: NodePort\n    rbac:\n        enabled: true\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAdd Helm repository and install traefik.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehelm repo add stable https://charts.helm.sh/stable\nhelm install traefik -n kerberos -f ./enterprise/yaml/traefik/values.yaml stable/traefik\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter installation you should have an IP attached to traefik service, look for it by executing the \u003ccode\u003eget service\u003c/code\u003e command. You will see the ip address in the \u003ccode\u003eEXTERNAL-IP\u003c/code\u003e attribute.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl get svc\n\n    NAME                        TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                      AGE\n    kubernetes                  ClusterIP      10.0.0.1       \u0026lt;none\u0026gt;          443/TCP                      36h\n--\u0026gt; traefik                     LoadBalancer   10.0.27.93     40.114.168.96   443:31623/TCP,80:31804/TCP   35h\n    traefik-dashboard           NodePort       10.0.252.6     \u0026lt;none\u0026gt;          80:31146/TCP                 35h\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eGo to your DNS provider and link the domain you\u0026rsquo;ve configured in the first step \u003ccode\u003etraefik.domain.com\u003c/code\u003e to the IP address of the \u003ccode\u003eEXTERNAL-IP\u003c/code\u003e attribute. When browsing to \u003ccode\u003etraefik.domain.com\u003c/code\u003e, you should see the traefik dashboard showing up.\u003c/p\u003e\n\u003ch3 id="ingress-nginx-alternative-for-traefik"\u003eIngress-Nginx (alternative for Traefik)\u003c/h3\u003e\n\u003cp\u003eIf you don\u0026rsquo;t like \u003ccode\u003eTraefik\u003c/code\u003e but you prefer \u003ccode\u003eIngress Nginx\u003c/code\u003e, that works as well.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nhelm install ingress-nginx -n kerberos ingress-nginx/ingress-nginx\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="mongodb"\u003eMongoDB\u003c/h3\u003e\n\u003cp\u003eWhen using Kerberos Enterprise, it will generate configurations for every surveillance camera deployed. These configuration files are stored centrally in a MongoDB database. Therefore we use \u003ccode\u003ehelm \u003c/code\u003eto install a MongoDB instance inside your cluster.\u003c/p\u003e\n\u003cp\u003eHave a look into the \u003ccode\u003eyaml/mongodb/values.yaml\u003c/code\u003e file, you will find plenty of configurations for your MongoDB instance. You will also find the attribute where you can change the root password of mongodb.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mongodb -n kerberos bitnami/mongodb --values ./enterprise/yaml/mongodb/values.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce installed succesfully the MongoDB instance, we should copy the password of the MongoDB instance. Once revealed copy the password, as we will need in the next steps.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport MONGODB_ROOT_PASSWORD=$(kubectl get secret -n kerberos mongodb -o jsonpath=\u0026quot;{.data.mongodb-root-password}\u0026quot; | base64 --decode)\necho $MONGODB_ROOT_PASSWORD\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="kerberos-enterprise-web-app---the-factory"\u003eKerberos Enterprise Web App - The Factory\u003c/h3\u003e\n\u003cp\u003eThe last step is to install the Kerberos Enterprise application. Kerberos Enterprise is managed through an application which we call the \u003ccode\u003eFactory\u003c/code\u003e. It is responsible for initiating the deployments inside your cluster. These deployments is what we also call (similar to the Open Source version) the machinery.\u003c/p\u003e\n\u003cp\u003eThe Factory is shipped as a web app (React) which provides you with a tool to update your deployments (agents) easily, monitor them, etc. The Factory is the central portal for managing Kerberos Enterprise inside your cluster. However at any point you can fine-tune or take-over using the \u003ccode\u003ekubectl\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eBefore installing the Factory web app, open the \u003ccode\u003e./enterprise/yaml/factory/deployment.yaml\u003c/code\u003e configuration file. At the of the bottom file you will find two endpoints, similar to the Ingres file bewlwo. Update the hostnames to your own perferred domain, and add these to your DNS server or \u003ccode\u003e/etc/hosts\u003c/code\u003e file (pointing to the same IP as the Traefik/Ingress nginx EXTERNAL-IP).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    spec:\n      rules:\n--\u0026gt;   - host: factory.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: factory\n              servicePort: 80\n--\u0026gt;   - host: api.factory.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: factory\n              servicePort: 8081\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are using Ingress Nginx, do not forgot to comment \u003ccode\u003eTraefik\u003c/code\u003e and uncomment \u003ccode\u003eIngress Nginx\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: factory\n  annotations:\n    #kubernetes.io/ingress.class: traefik\n    kubernetes.io/ingress.class: nginx\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eModify the MongoDB credentials, and make sure they match the credentials of your MongoDB instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    - name: MONGODB_USERNAME\n      value: \u0026quot;root\u0026quot;\n    - name: MONGODB_PASSWORD\n--\u0026gt;   value: \u0026quot;xxxxxxxxxx\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you have corrected the DNS names (or internal /etc/hosts file), install the Factory web app inside your cluster.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -n kerberos -f ./enterprise/yaml/factory/deployment.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="test-out-configuration"\u003eTest out configuration\u003c/h2\u003e\n\u003cp\u003eIf everything worked out as expected, you should now have following services in your cluster:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003cli\u003eFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt should look like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ kubectl get pods -n kerberos\nNAME                              READY   STATUS    RESTARTS   AGE\nfactory-6f5c877d7c-hf77p          1/1     Running   0          2d11h\nmongodb-758d5c5ddd-qsfq9          1/1     Running   0          5m31s\ntraefik-7d566ccc47-mwslb          1/1     Running   0          4d12h\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="access-the-system"\u003eAccess the system\u003c/h2\u003e\n\u003cp\u003eOnce everything is configured correctly your cluster and DNS, you should be able to setup the Factory application. By navigating to the Factory domain \u003ccode\u003efactory.domain.com\u003c/code\u003e in your browser you will see the Factory login page showing up.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-loginpage.png" alt="Factory"\u003e\u003c/p\u003e\n'},{id:25,href:"/vault/installation-cloud/",title:"Cloud Installation3",description:"",content:'\u003cp\u003eIf not already the case, start by installing a Kubernetes cluster. This can be done on one of the hyperscalers (\u003cstrong\u003eAWS\u003c/strong\u003e, \u003cstrong\u003eGCP\u003c/strong\u003e or \u003cstrong\u003eAzure\u003c/strong\u003e), cloud providers (Digital Ocean, Scaleway, etc) or on-premise in your own private network.\u003c/p\u003e\n\u003cbr/\u003e\n\u003cdiv class=\'embed-container\'\u003e\u003ciframe src="https://player.vimeo.com/video/404813147" width="640" height="400" frameborder="0" allow="autoplay; fullscreen" allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003cbr/\u003e\u003cbr/\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eKerberos Storage is the storage component for Kerberos Enterprise. It is used to store your recordings at a central place, in the storage system you prefer. Next to that it can be used for extension and integration capabilities. Learn more about \u003ca href="/storage"\u003eKerberos Storage here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo use Kerberos Storage, you will need to have Kerberos Enterprise installed, and deployments running. Independent from that one can also use the Kerberos Storage API \u003ccode\u003e/swagger/index.html\u003c/code\u003e to send recordings from a custom build VMS.\u003c/p\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eSimilar to Kerberos Enterprise, Kerberos Storage, requires some initial components to be installed. If you will run Kerberos Storage in the same cluster as where you have Kerberos Enterprise running, there is not much to do.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-architecture-kubernetes-cloud.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eHowever if you plan to run Kerberos Storage in a different cluster (which is perfectly possible), you will need to make sure you complete the initial setup of \u003ca href="/enterprise/installation"\u003eKerberos Enterprise installation\u003c/a\u003e. To be more specific you will need the following components running:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHelm\u003c/li\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce this is done start by cloning the configurations from our \u003ca href="https://github.com/kerberos-io/storage"\u003eGithub repo\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/storage\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="storage"\u003eStorage\u003c/h3\u003e\n\u003cp\u003eSimilar to Kerberos Enterprise, Kerberos Storage is managed through a web app. It allows you to add storage providers (S3, minio, etc), add queues for messaging, accounts for security and much more. It also comes with API\u0026rsquo;s, which you can use to interact and retrieve information from Kerberos Storage. All is documented in the form of Swagger APIs \u003ccode\u003e/swagger/index.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBefore installing Kerberos Storage, open the \u003ccode\u003e./storage/yaml/deployment.yaml\u003c/code\u003e configuration file. At the bottom file you will find two endpoints, similar to the Traefik config file below. Update the domain names to your own domain, and add these to your DNS server or \u003ccode\u003e/etc/hosts\u003c/code\u003e file (and point to the same IP as the Traefik EXTERNAL-IP).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    spec:\n      rules:\n--\u0026gt;   - host: storage.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: kerberos-storage\n              servicePort: 80\n--\u0026gt;   - host: api.storage.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: kerberos-storage\n              servicePort: 8081\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you are using Ingress Nginx, do not forgot to comment \u003ccode\u003eTraefik\u003c/code\u003e and uncomment \u003ccode\u003eIngress Nginx\u003c/code\u003e. Also note the extra argument \u003ccode\u003eproxy-body-size\u003c/code\u003e, this is required for not reaching the default 1MB body size limit. If you do not enable this, you might experience \u003ccode\u003e413\u003c/code\u003e errors in your Kerberos Enterprise agents.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: kerberos-storage\n  annotations:\n    #kubernetes.io/ingress.class: traefik\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/proxy-body-size: 200m\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext to that modify the MongoDB credentials, and make sure they match the credentials of your MongoDB instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    - name: MONGODB_USERNAME\n      value: \u0026quot;root\u0026quot;\n    - name: MONGODB_PASSWORD\n--\u0026gt;   value: \u0026quot;xxxxxxxxxx\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you have corrected the DNS names and MongoDB credentials, install Kerberos Storage inside your cluster.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -f ./storage/yaml/deployment.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="test-out-configuration"\u003eTest out configuration\u003c/h2\u003e\n\u003cp\u003eIf everything worked out as expected, you should now have following services in your cluster:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003cli\u003eStorage\u003c/li\u003e\n\u003cli\u003eEnterprise (optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt should look like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\nkerberos-storage-6f5c877d7c-hf77p 1/1     Running   0          2d11h\nmongodb-55566dc65c-xgmns          2/2     Running   0          4d13h\ntraefik-7d566ccc47-mwslb          1/1     Running   0          4d12h\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="access-the-system"\u003eAccess the system\u003c/h2\u003e\n\u003cp\u003eOnce everything is configured correctly your cluster and DNS or \u003ccode\u003e/etc/hosts\u003c/code\u003e file, you should be able to access the Storage application. By navigating to the Storage domain \u003ccode\u003estorage.domain.com\u003c/code\u003e in your browser you will see the Storage login page showing up.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-loginpage.png" alt="Storage"\u003e\u003c/p\u003e\n'},{id:26,href:"/hub/releases/",title:"Releases4",description:"",content:""},{id:27,href:"/enterprise/installation-edge/",title:"Edge Installation",description:"",content:'\u003cp\u003eWelcome to the Kerberos Enterprise Edge installation. This is the way to go if you want to install Kerberos Enterprise on your Baremetal infrastructure or inside your Private Cloud.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-agent-architecture-kubernetes.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eBefore we can actual start installing the different deployments in our cluster, we need to make sure we have one available.\u003c/p\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003ch3 id="docker"\u003eDocker\u003c/h3\u003e\n\u003cp\u003eIf you have a fresh Linux installation, make sure you have Docker installed. If not the case, this is how you can install it on a Ubuntu OSS.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapt install docker.io -y\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="kubernetes"\u003eKubernetes\u003c/h3\u003e\n\u003cp\u003eAfter Docker being installed go ahead and install the different Kubernetes servicess and tools.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapt update -y\napt install apt-transport-https curl -y\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add\napt-add-repository \u0026quot;deb http://apt.kubernetes.io/ kubernetes-xenial main\u0026quot;\napt update -y \u0026amp;\u0026amp; apt install kubeadm kubelet kubectl kubernetes-cni -y\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMake sure you disable swap, this is required by Kubernetes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eswapoff -a\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd if you want to make it permanent after every boot.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esudo sed -i.bak \'/ swap / s/^\\(.*\\)$/#\\1/g\' /etc/fstab\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eBefore initiating a new Kubernetes cluster, make sure you have properly cleaned up previous installation (if this was the case ofc).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubeadm reset\nrm -rf $HOME/.kube\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInitiate a new Kubernetes cluster using following command. This will use the current CIDR. If you want to use another CIDR, specify following arguments: \u003ccode\u003e--pod-network-cidr=10.244.0.0/16\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubeadm init\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce successful you should see the following. Note the \u003ccode\u003ediscovery token\u003c/code\u003e which you need to use to connect additional nodes to your cluster.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \u0026quot;kubectl apply -f [podnetwork].yaml\u0026quot; with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 192.168.1.103:6443 --token ej7ckt.uof7o2iplqf0r2up \\\n    --discovery-token-ca-cert-hash sha256:9cbcc00d34be2dbd605174802d9e52fbcdd617324c237bf58767b369fa586209\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have a Kubernetes cluster, we need to make sure we add make it available in our \u003ccode\u003ekubeconfig\u003c/code\u003e. This will allow us to query our Kubernetes cluster with the \u003ccode\u003ekubectl\u003c/code\u003e command.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir -p $HOME/.kube\ncp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nchown $(id -u):$(id -g) $HOME/.kube/config\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="untaint-all-nodes"\u003eUntaint all nodes\u003c/h3\u003e\n\u003cp\u003eBy default, and in this example, we only have one node our master node. In a production scenario we would have additional worker nodes. By default the master nodes are marked as \u003ccode\u003etainted\u003c/code\u003e, this means they cannot run workloads. To allow master nodes to run workloads, we need to untaint them. If we wouldn\u0026rsquo;t do this our pods would never be scheduled, as we do not have worker nodes at this moment.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl taint nodes --all node-role.kubernetes.io/master-\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="calico"\u003eCalico\u003c/h3\u003e\n\u003cp\u003eCalico is an open source networking and network security solution for containers, virtual machines, and native host-based workloads. (https://www.projectcalico.org/). We will use it as our network layer in our Kubernetes cluster. You could use otthers like Flannel aswell, but we prefer Calico.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl https://docs.projectcalico.org/manifests/calico.yaml -O\nkubectl apply -f calico.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="kerberos-enterprise"\u003eKerberos Enterprise\u003c/h3\u003e\n\u003cp\u003eBefore setting up Kerberos Enterprise, some configuration needs to happen. First thing that we need to do is setting up the RBAC permissions (Role Based Access Control). We need to enable this to be able to query specific endpoints from the Kubernetes API. By default these endpoints are locked, so we need to unlock them.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/enterprise\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eA best practice is to create a separate namespace for your enterprise deployment.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create namespace kerberos\n\nkubectl create -n kerberos -f ./enterprise/yaml/factory/clusterrole.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will make several actions, permissions, inside your cluster available. We need this to be able to create deployments from the Kerberos Enterprise web app.\u003c/p\u003e\n\u003ch3 id="metallb"\u003eMetalLB\u003c/h3\u003e\n\u003cp\u003eIn the Edge world, we do not have fancy Load balancers and Public IP from which we can benefit. To overcome this solutions such as MetalLB - Baremetal Load Balancer - have been developed (https://metallb.universe.tf/installation/). MetalLB will dedicate an internal IP address, or IP range, which will be assigned to one or more Load Balancers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml\nkubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml\nkubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=\u0026quot;$(openssl rand -base64 128)\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter installing the different MetalLB components, we need to create a \u003ccode\u003econfigmap.yaml\u003c/code\u003e file. This file contains information of how MetalLB can get and use internal IP\u0026rsquo;s as LoadBalancers.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  apiVersion: v1\n  kind: ConfigMap\n  metadata:\n    namespace: metallb-system\n    name: config\n  data:\n    config: |\n      address-pools:\n      - name: default\n        protocol: layer2\n        addresses:\n--\u0026gt;     - 192.168.1.200-192.168.1.210\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can change the IP range above to match your needs. MetalLB will use this range as a referance to assign IP addresses to your LoadBalancers. Once ready you can apply the configration map.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -n kerberos -f ./enterprise/yaml/metallb/configmap.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="helm"\u003eHelm\u003c/h3\u003e\n\u003cp\u003eBefore we can start with the real work, I know we had to do a lot of preparation, we have to install another helpful tool \u003ccode\u003eHelm\u003c/code\u003e. Helm is a package manager for Kubernetes, and really makes you life easier.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ecurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis will make sure helm 3 is installed.\u003c/p\u003e\n\u003ch3 id="traefik"\u003eTraefik\u003c/h3\u003e\n\u003cp\u003eTo access the Kerberos Enterprise web application, we will create a service in the next paragraphs. This service will expose the web application as an Ingress. Thanks to our previous installation with MetalLB and Traefik (what we will do now), we will have a neat solution for managing our hostnames and Load Balancing IPs.\u003c/p\u003e\n\u003cp\u003eThe idea is that Traefik, will have a dedicated IP address assigned from MetalLB, and will resolve the Ingress of our Kerberos Enterprise web app. Let\u0026rsquo;s go ahead with installing Traefik.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehelm repo add stable https://charts.helm.sh/stable\nhelm install -n kerberos traefik -f ./enterprise/yaml/traefik/values.yaml stable/traefik\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="mongodb"\u003eMongoDB\u003c/h3\u003e\n\u003cp\u003eWhen using Kerberos Enterprise, it will generate configurations for every surveillance camera deployed. These configuration files are stored centrally in a MongoDB database. Therefore we use \u003ccode\u003ehelm\u003c/code\u003e to install a MongoDB instance inside your cluster.\u003c/p\u003e\n\u003cp\u003eBefore we can move into the installation of MongoDB, in contrary with the cloud installation, we will need to create a Persistent Volume (PV). For simplicity we will use \u003ccode\u003elocal-storage\u003c/code\u003e, and make sure the volume is assigned to a specific node (hostname).\u003c/p\u003e\n\u003cp\u003eCreate a folder on the node (VM), where you want to persist the data of MongoDB.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir /home/mongodb/\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done open the \u003ccode\u003e./enterprise/yaml/mongodb/volume.yaml\u003c/code\u003e file and make sure to change capacity, local path (if changed) and the hostname attribute (VM/machine, on which the directory is made available).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    spec:\n      capacity:\n--\u0026gt;    storage: 10Gi\n      accessModes:\n      - ReadWriteOnce\n      persistentVolumeReclaimPolicy: Recycle\n      storageClassName: local-storage\n      local:\n--\u0026gt;    path: /home/mongodb/\n      nodeAffinity:\n        required:\n          nodeSelectorTerms:\n          - matchExpressions:\n            - key: kubernetes.io/hostname\n              operator: In\n              values:\n--\u0026gt;           - hostname\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter modified properly you can go ahead with creating the PV.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl create -n kerberos -f ./enterprise/yaml/mongodb/volume.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHave a look into the \u003ccode\u003e./enterprise/yaml/mongodb/values.yaml\u003c/code\u003e file, you will find plenty of configurations for your MongoDB instance. You will also find the attribute where you can change the root password of MongoDB.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ehelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install mongodb bitnami/mongodb --values ./enterprise/yaml/mongodb/values-edge.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce installed succesfully the MongoDB instance, we should copy the password of the MongoDB instance. Once revealed copy the password, as we will need in the next steps.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport MONGODB_ROOT_PASSWORD=$(kubectl get secret -n kerberos mongodb -o jsonpath=\u0026quot;{.data.mongodb-root-password}\u0026quot; | base64 --decode)\necho $MONGODB_ROOT_PASSWORD\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="kerberos-enterprise-web-app---the-factory"\u003eKerberos Enterprise Web App - The Factory\u003c/h3\u003e\n\u003cp\u003eThe last step is to install the Kerberos Enterprise application. Kerberos Enterprise is managed through an application which we call the \u003ccode\u003eFactory\u003c/code\u003e. It is responsible for initiating the deployments inside your cluster. These deployments is what we also call (similar to the Open Source version) the machinery.\u003c/p\u003e\n\u003cp\u003eThe Factory is shipped as a web app (React) which provides you with a tool to update your deployments (agents) easily, monitor them, etc. The Factory is the central portal for managing Kerberos Enterprise inside your cluster. However at any point you can fine-tune or take-over using the \u003ccode\u003ekubectl\u003c/code\u003e command.\u003c/p\u003e\n\u003cp\u003eBefore installing the Factory web app, open the \u003ccode\u003e./enterprise/yaml/factory/deployment.yaml\u003c/code\u003e configuration file. At the bottom file you will find two endpoints, similar to the traefik config file. Update the domain names to your own domain, and add these to your DNS server (pointing to the same IP as the traefik EXTERNAL-IP).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    spec:\n      rules:\n--\u0026gt;   - host: factory.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: factory\n              servicePort: 80\n--\u0026gt;   - host: api.factory.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: factory\n              servicePort: 8081\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eModify the MongoDB credentials, and make sure they match the credentials of your MongoDB instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    - name: MONGODB_USERNAME\n      value: \u0026quot;root\u0026quot;\n    - name: MONGODB_PASSWORD\n--\u0026gt;   value: \u0026quot;xxxxxxxxxx\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you have corrected the DNS names (or internal /etc/hosts file), install the Factory web app inside your cluster.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -n kerberos -f ./enterprise/yaml/factory/deployment.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="test-out-configuration"\u003eTest out configuration\u003c/h2\u003e\n\u003cp\u003eIf everything worked out as expected, you should now have following services in your cluster:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003cli\u003eFactory\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt should look like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ kubectl get pods -n kerberos\nNAME                              READY   STATUS    RESTARTS   AGE\nfactory-6f5c877d7c-hf77p          1/1     Running   0          2d11h\nmongodb-758d5c5ddd-qsfq9          1/1     Running   0          5m31s\ntraefik-7d566ccc47-mwslb          1/1     Running   0          4d12h\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="access-the-system"\u003eAccess the system\u003c/h2\u003e\n\u003cp\u003eOnce everything is configured correctly your cluster and DNS, you should be able to setup the Factory application. By navigating to the Factory domain \u003ccode\u003efactory.domain.com\u003c/code\u003e in your browser you will see the Factory login page showing up.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-loginpage.png" alt="Factory"\u003e\u003c/p\u003e\n'},{id:28,href:"/vault/installation-edge/",title:"Edge Installation3",description:"",content:'\u003cp\u003eWelcome to the Kerberos Storage Edge installation. This is the way to go if you want to install Kerberos Storage on your Baremetal infrastructure or inside your Private Cloud.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/kerberos-storage-architecture-kubernetes-edge.png" alt="architecture kubernetes"\u003e\u003c/p\u003e\n\u003cp\u003eBefore we can actual start installing the different deployments in our cluster, we need to make sure we have one available.\u003c/p\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eKerberos Storage is the storage component for Kerberos Enterprise. It is used to store your recordings at a central place, in the storage system you prefer. Next to that it can be used for extension and integration capabilities. Learn more about \u003ca href="/storage"\u003eKerberos Storage here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eTo use Kerberos Storage, you will need to have Kerberos Enterprise installed, and deployments running. Independent from that one can also use the Kerberos Storage API \u003ccode\u003e/swagger/index.html\u003c/code\u003e to send recordings from a custom build VMS.\u003c/p\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eSimilar to Kerberos Enterprise, Kerberos Storage, requires some initial components to be installed. If you will run Kerberos Storage in the same cluster as where you have Kerberos Enterprise running, there is not much to do.\u003c/p\u003e\n\u003cp\u003eHowever if you plan to run Kerberos Storage in a different cluster (which is perfectly possible), you will need to make sure you complete the initial setup of \u003ca href="/enterprise/installation-edge"\u003eKerberos Enterprise Edge\u003c/a\u003e installation. To be more specific you will need the following components running:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHelm\u003c/li\u003e\n\u003cli\u003eCalico\u003c/li\u003e\n\u003cli\u003eMetalLB\u003c/li\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce this is done start by cloning the configurations from our \u003ca href="https://github.com/kerberos-io/storage"\u003eGithub repo\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/storage\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id="storage"\u003eStorage\u003c/h3\u003e\n\u003cp\u003eSimilar to Kerberos Enterprise, Kerberos Storage is managed through a web app. It allows you to add storage providers (S3, minio, etc), add queues for messaging, accounts for security and much more. It also comes with API\u0026rsquo;s, which you can use to interact and retrieve information from Kerberos Storage. All is documented in the form of Swagger APIs \u003ccode\u003e/swagger/index.html\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBefore installing Kerberos Storage, open the \u003ccode\u003e./storage/yaml/deployment.yaml\u003c/code\u003e configuration file. At the bottom file you will find two endpoints, similar to the Traefik config file below. Update the domain names to your own domain, and add these to your DNS server or \u003ccode\u003e/etc/hosts\u003c/code\u003e file (and point to the same IP as the Traefik EXTERNAL-IP).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    spec:\n      rules:\n--\u0026gt;   - host: storage.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: kerberos-storage\n              servicePort: 80\n--\u0026gt;   - host: api.storage.domain.com\n        http:\n          paths:\n          - path: /\n            backend:\n              serviceName: kerberos-storage\n              servicePort: 8081\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext to that modify the MongoDB credentials, and make sure they match the credentials of your MongoDB instance.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    - name: MONGODB_USERNAME\n      value: \u0026quot;root\u0026quot;\n    - name: MONGODB_PASSWORD\n--\u0026gt;   value: \u0026quot;xxxxxxxxxx\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce you have corrected the DNS names and MongoDB credentials, install Kerberos Storage inside your cluster.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -f ./storage/yaml/deployment.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="test-out-configuration"\u003eTest out configuration\u003c/h2\u003e\n\u003cp\u003eIf everything worked out as expected, you should now have following services in your cluster:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMongoDB\u003c/li\u003e\n\u003cli\u003eTraefik\u003c/li\u003e\n\u003cli\u003eStorage\u003c/li\u003e\n\u003cli\u003eEnterprise (optional)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt should look like this.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\nkerberos-storage-6f5c877d7c-hf77p 1/1     Running   0          2d11h\nmongodb-55566dc65c-xgmns          2/2     Running   0          4d13h\ntraefik-7d566ccc47-mwslb          1/1     Running   0          4d12h\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="access-the-system"\u003eAccess the system\u003c/h2\u003e\n\u003cp\u003eOnce everything is configured correctly your cluster and DNS or \u003ccode\u003e/etc/hosts\u003c/code\u003e file, you should be able to access the Storage application. By navigating to the Storage domain \u003ccode\u003estorage.domain.com\u003c/code\u003e in your browser you will see the Storage login page showing up.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/factory/kerberos-factory-loginpage.png" alt="Storage"\u003e\u003c/p\u003e\n'},{id:29,href:"/vault/providers/",title:"Providers",description:"",content:'\u003cp\u003eKerberos Storage allows you to attach one or more (and different) storage providers. These providers could be in the cloud like S3, Google Cloud Storage or Azure blob storage, or providers on premise such as Minio.\u003c/p\u003e\n\u003cp\u003eDepending on your use case: Kerberos Storage Cloud or Kerberos Storage Edge, you will opt for a specific storage provider. For example in the case Kerberos Storage Edge, it makes sense to store your recordings also at the edge. The accomplish this you could for example setup a Minio instance.\u003c/p\u003e\n\u003cp\u003eBelow you can find a detailed step-by-step guide to setup different storage providers.\u003c/p\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eThis installation guide assumes you have setup Kerberos Storage properly.\u003c/p\u003e\n\u003ch2 id="installation-minio"\u003eInstallation Minio\u003c/h2\u003e\n\u003cp\u003eMinio is the recommended solution if you want to persist your data at the edge. To setup minio you just have to install a few components. Let\u0026rsquo;s start with getting the configuration files (if not already done) for setting up Minio.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/storage\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNow we have the configrations available, let\u0026rsquo;s use start with creating a \u003ccode\u003elocal-storage\u003c/code\u003e volume using \u003ccode\u003e./storage/yaml/minio/volume.yaml\u003c/code\u003e file. When opening the file we should focus on following attributes.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  spec:\n    capacity:\n--\u0026gt;   storage: 20Gi\n    accessModes:\n    - ReadWriteOnce\n    persistentVolumeReclaimPolicy: Recycle\n    storageClassName: hdd\n    local:\n--\u0026gt;   path: /home/minio\n    nodeAffinity:\n      required:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: In\n            values:\n--\u0026gt;         - hostname\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAdapt the storage capacity to the amount of storage you want to assign to Minio, change the local path to the directory where you want to persist your data, and to finish make sure the hostname is the hostname of your node (where the directory is located). Once ready we can create the \u003ccode\u003elocal.path\u003c/code\u003e directory and create the volume.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emkdir /home/minio\nkubectl apply -f ./storage/yaml/minio/volume.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNext create Persistent Volume Claim (PVC), open the \u003ccode\u003e./storage/yaml/minio/volume.yaml\u003c/code\u003e file and make sure the storage is aligned with the configurations of you \u003ccode\u003evolume.yaml\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  resources:\n    # This is the request for storage. Should be available in the cluster.\n    requests:\n--\u0026gt;   storage: 20Gi    \n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce ready, create the PVC.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -f ./storage/yaml/minio/pvc.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOk, let us finish this and deploy the Kerberos Storage deployment. Before applying, we have to make sure the Ingress hostname is aligned. Open the \u003ccode\u003e./storage/yaml/minio/deployment.yaml\u003c/code\u003e file and scroll down until you see the Ingress.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e  spec:\n    rules:\n--\u0026gt; - host: minio.domain.com\n      http:\n        paths:\n        - path: /\n          backend:\n            serviceName: minio\n            servicePort: 9000\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAdapt the hostname to your needs, and apply the \u003ccode\u003edeployment.yaml\u003c/code\u003e file when appropriate.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ekubectl apply -f ./storage/yaml/minio/deployment.yaml\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou should now see Minio being installed, and able to access it from your favourite web browser. You can use with the credentials you have defined in the \u003ccode\u003edeployment.yaml file.\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/minio/webapp.png" alt="minio kubernetes"\u003e\u003c/p\u003e\n'},{id:30,href:"/enterprise/releases/",title:"Releases2",description:"",content:'\u003ch3 id="100"\u003e1.0.0\u003c/h3\u003e\n\u003ch4 id="factory"\u003eFactory\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReact application using the Kubernetes and Docker Golang SDK.\u003c/li\u003e\n\u003cli\u003ePossibility to add deployments one by one or in bulk (Excel).\u003c/li\u003e\n\u003cli\u003eConfigure machinery deployments: select a region of interest, specify recording time (pre, andd post recording), specify time interval.\u003c/li\u003e\n\u003cli\u003eGlobal configuration page, where you specify your cloud credentials at a single place.\u003c/li\u003e\n\u003c/ul\u003e\n'},{id:31,href:"/vault/recycle/",title:"Recycle",description:"",content:'\u003cp\u003eNext to storing your recordings, recycling up is also important. You have to avoid your disk being filled up and locking up the entire system and cluster, or you simply have to reduce cost. To make this possible we offer a recycle service called Kerberos Storage Recycle, which you can use to remove recordings based on different rules.\u003c/p\u003e\n\u003ch2 id="recycling-rules"\u003eRecycling rules\u003c/h2\u003e\n\u003cp\u003eDifferent recycling rules can be configured in the Kerberos Storage app. Based on those rules, the recycle service, will or will not remove a recording from your providers.\u003c/p\u003e\n\u003ch3 id="account-day-limit"\u003eAccount day limit\u003c/h3\u003e\n\u003cp\u003eWhen creating an \u003ccode\u003eAccount\u003c/code\u003e on the Kerberos Storage app, you have the option to specify the day limit for that account. This day limit tells the recycle service, if it is time or not to remove the recording.\u003c/p\u003e\n\u003cp\u003e\u003cimg src="../../public/images/storage/daylimit.gif" alt="Storage - Day Limit"\u003e\u003c/p\u003e\n\u003ch2 id="prerequisites"\u003ePrerequisites\u003c/h2\u003e\n\u003cp\u003eThis installation guide assumes you have setup Kerberos Storage properly.\u003c/p\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eModify the MongoDB credentials, as you did for the Kerberos Storage yaml file.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    - name: MONGODB_USERNAME\n      value: \u0026quot;root\u0026quot;\n    - name: MONGODB_PASSWORD\n--\u0026gt;   value: \u0026quot;xxxxxxxxxx\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExecute following script to deploy the recycle job.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit clone https://github.com/kerberos-io/storage\nkubectl apply -f ./storage/yaml/deployment-cleanup.yaml\u003c/code\u003e\u003c/pre\u003e\n'},{id:32,href:"/vault/releases/",title:"Releases3",description:"",content:'\u003cp\u003eA license can be obtained by requesting a contract offert a cedric@verstraeten.io. Once agreed, a license will be generated on the Kerberos License server.\u003c/p\u003e\n\u003ch2 id="eula"\u003eEULA\u003c/h2\u003e\n\u003cp\u003eThis agreement (or “EULA”) is a legal agreement between the person, company or organization (“You”) that has licensed a software product (Kerberos Storage) and Verstraeten.io (“Licensor” or “Application Provider”). The Product is to be obtained only through Docker Hub (https://hub.docker.com), and by obtaining a purchased license. By installing and/or using any Product provided by the Licensor, You are confirming your acceptance of this agreement and you are agreeing to become bound by the terms of this agreement.\u003c/p\u003e\n\u003cp\u003eThis EULA shall apply only to a Product supplied by the Licensor herewith regardless of whether other software or platform is referred to or described herein.\u003c/p\u003e\n\u003cp\u003eThe Products transacted through the Services are licensed, not sold, to You for use only under the terms of this license. The Application Provider reserves all rights not expressly granted to You. The Product that is subject to this license is referred to in this license as the “Licensed Application.” The Licensed Application is to be used on any operating system or machine (on-premise/cloud) and the aforementioned devices are referenced in this license as “Devices”.\u003c/p\u003e\n\u003cp\u003ea. Scope of License: This license granted to You for the Licensed Application by Application Provider is limited to a non-transferable license to use the Licensed Application on any Devices that You own or control and as permitted by the Usage Rules. This license does not allow You to use the Licensed Application on any Devices that You do not own or control, and You may not distribute or make the Licensed Application available over a network where it could be used by multiple devices at the same time. You may not rent, lease, lend, sell, redistribute or sublicense the Licensed Application. You may not copy (except as expressly permitted by this license and the Usage Rules), decompile, reverse engineer, disassemble, attempt to derive the source code of, modify, or create derivative works of the Licensed Application, any updates, or any part thereof (except as and only to the extent any foregoing restriction is prohibited by applicable law or to the extent as may be permitted by the licensing terms governing use of any open sourced components included with the Licensed Application). Any attempt to do so is a violation of the rights of the Application Provider and its licensors. If You breach this restriction, You may be subject to prosecution and damages. The terms of the license will govern any upgrades provided by Application Provider that replace and/or supplement the original Product, unless such upgrade is accompanied by a separate license in which case the terms of that license will govern.\u003c/p\u003e\n\u003cp\u003eb. Consent to Use of Data: You agree that Application Provider may collect and use technical data and related information, including but not limited to technical information about Your device, system and application software, and peripherals, that is gathered periodically to facilitate the provision of software updates, product support and other services to You (if any) related to the Licensed Application. Application Provider may use this information, as long as it is in a form that does not personally identify You, to improve its products or to provide services or technologies to You.\u003c/p\u003e\n\u003cp\u003ec. Termination. The license is effective until terminated by You or Application Provider. Your rights under this license will terminate automatically without notice from the Application Provider if You fail to comply with any term(s) of this license. Upon termination of the license, You shall cease all use of the Licensed Application, and destroy all copies, full or partial, of the Licensed Application.\u003c/p\u003e\n\u003cp\u003ed. Services; Third Party Materials. The Licensed Application may enable access to Application Provider’s and third party services and web sites (collectively and individually, “Services”). Use of the Services may require Internet access and that You accept additional terms of service.\u003c/p\u003e\n\u003cp\u003eYou understand that by using any of the Services, You may encounter content that may be deemed offensive, indecent, or objectionable, which content may or may not be identified as having explicit language, and that the results of any search or entering of a particular URL may automatically and unintentionally generate links or references to objectionable material. Nevertheless, You agree to use the Services at Your sole risk and that the Application Provider shall not have any liability to You for content that may be found to be offensive, indecent, or objectionable.\u003c/p\u003e\n\u003cp\u003eCertain Services may display, include or make available content, data, information, applications or materials from third parties (“Third Party Materials”) or provide links to certain third party web sites. By using the Services, You acknowledge and agree that the Application Provider is not responsible for examining or evaluating the content, accuracy, completeness, timeliness, validity, copyright compliance, legality, decency, quality or any other aspect of such Third Party Materials or web sites. The Application Provider does not warrant or endorse and does not assume and will not have any liability or responsibility to You or any other person for any third-party Services, Third Party Materials or web sites, or for any other materials, products, or services of third parties. Third Party Materials and links to other web sites are provided solely as a convenience to You. Financial information displayed by any Services is for general informational purposes only and is not intended to be relied upon as investment advice. Before executing any securities transaction based upon information obtained through the Services, You should consult with a financial professional. Location data provided by any Services is for basic navigational purposes only and is not intended to be relied upon in situations where precise location information is needed or where erroneous, inaccurate or incomplete location data may lead to death, personal injury, property or environmental damage. Neither the Application Provider, nor any of its content providers, guarantees the availability, accuracy, completeness, reliability, or timeliness of stock information or location data displayed by any Services.\u003c/p\u003e\n\u003cp\u003eYou agree that any Services contain proprietary content, information and material that is protected by applicable intellectual property and other laws, including but not limited to copyright, and that You will not use such proprietary content, information or materials in any way whatsoever except for permitted use of the Services. No portion of the Services may be reproduced in any form or by any means. You agree not to modify, rent, lease, loan, sell, distribute, or create derivative works based on the Services, in any manner, and You shall not exploit the Services in any unauthorized way whatsoever, including but not limited to, by trespass or burdening network capacity. You further agree not to use the Services in any manner to harass, abuse, stalk, threaten, defame or otherwise infringe or violate the rights of any other party, and that the Application Provider is not in any way responsible for any such use by You, nor for any harassing, threatening, defamatory, offensive or illegal messages or transmissions that You may receive as a result of using any of the Services.\u003c/p\u003e\n\u003cp\u003eIn addition, third party Services and Third Party Materials that may be accessed from, displayed on or linked to from the Devices are not available in all languages or in all countries. The Application Provider makes no representation that such Services and Materials are appropriate or available for use in any particular location. To the extent You choose to access such Services or Materials, You do so at Your own initiative and are responsible for compliance with any applicable laws, including but not limited to applicable local laws. The Application Provider, and its licensors, reserve the right to change, suspend, remove, or disable access to any Services at any time without notice. In no event will the Application Provider be liable for the removal of or disabling of access to any such Services. The Application Provider may also impose limits on the use of or access to certain Services, in any case and without notice or liability.\u003c/p\u003e\n\u003cp\u003ee. No Warranty: You expressly acknowledge and agree that use of the licensed application is at your sole risk and that the entire risk as to satisfactory quality, performance, accuracy and effort is with you. To the maximum extent permitted by applicable law, the license application and any services performed or provided by the licensed application (“services”) are provided “as is” and “as available,” with all faults and without warranty of any kind, and application provider hereby disclaims all warranties and conditions with respect to the licensed application and any services, either express, implied or statutory, including, but not limited to, the implied warranties and/or conditions of merchantability, of satisfactory quality, of fitness for a particular purpose, of accuracy, of quiet enjoyment, and non-infringement of third party rights. Application provider does not warrant against interference with your enjoyment of the licensed application, that the functions contained in, or services performed or provided by, the licensed application will meet your requirements, that the operation of the licensed application or services will be uninterrupted or error-free, or that effects in the licensed application or services will be corrected. No oral or written information or advice given by application provider or its authorized representative shall create a warranty. Should the licensed application or services prove defective, you assume the entire cost of all necessary servicing, repair or correction. Some jurisdictions do not allow the exclusion of implied warranties or limitations on applicable statutory rights of a consumer, so the above exclusion and limitations may not apply to you.\u003c/p\u003e\n\u003cp\u003ef. Limitation of Liability. To the extent not prohibited by law, in no event shall application provider be liable for personal injury, or any incidental, special, indirect or consequential damages whatsoever, including, without limitation, damages for loss of profits, loss of data, business interruption or any other commercial damages or losses, arising out of or related to your use or inability to use the licensed application, however caused, regardless of the theory of liability (contract, tort or otherwise) and even if application provider has been advised of the possibility of such damages. Some jurisdictions do not allow the limitation of liability for personal injury, or of incidental or consequential damages, so this limitation may not apply to you.\u003c/p\u003e\n\u003cp\u003eIn no event shall Application Provider’s total liability to you for all damages (other than as may be required by applicable law in cases involving personal injury) exceed the amount of fifty dollars ($50.00). The foregoing limitations will apply even if the above stated remedy fails of its essential purpose.\u003c/p\u003e\n\u003cp\u003eg. You may not use or otherwise export or re-export the Licensed Application except as authorized by United States law and the laws of the jurisdiction in which the Licensed Application was obtained. In particular, but without limitation, the Licensed Application may not be exported or re-exported (a) into any U.S. embargoed countries or (b) to anyone on the U.S. Treasury Department’s list of Specially Designated Nationals or the U.S. Department of Commerce Denied Person’s List or Entity List. By using the Licensed Application, you represent and warrant that you are not located in any such country or on any such list. You also agree that you will not use these products for any purposes prohibited by United States law, including, without limitation, the development, design, manufacture or production of nuclear, missiles, or chemical or biological weapons.\u003c/p\u003e\n\u003cp\u003eh. The Licensed Application and related documentation are “Commercial Items”, as that term is defined at 48 C.F.R. §2.101, consisting of “Commercial Computer Software” and “Commercial Computer Software Documentation”, as such terms are used in 48 C.F.R. §12.212 or 48 C.F.R. §227.7202, as applicable. Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Commercial Computer Software and Commercial Computer Software Documentation are being licensed to U.S. Government end users (a) only as Commercial Items and (b) with only those rights as are granted to all other end users pursuant to the terms and conditions herein. Unpublished-rights reserved under the copyright laws of the United States.\u003c/p\u003e\n\u003cp\u003ei. The laws of the State of Belgium, excluding its conflicts of law rules, govern this license and your use of the Licensed Application. Your use of the Licensed Application may also be subject to other local, state, national, or international laws.\u003c/p\u003e\n'},{id:33,href:"/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:""},{id:34,href:"/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:""},{id:35,href:"/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:""},{id:36,href:"/enterprise/",title:"Enterprise",description:"",content:""},{id:37,href:"/hub/",title:"Enterprise",description:"",content:""},{id:38,href:"/vault/",title:"Enterprise",description:"",content:""},{id:39,href:"/help/",title:"Help",description:"Help Doks.",content:""},{id:40,href:"/opensource/",title:"Opensource",description:"",content:""},{id:41,href:"/opensourcev3/",title:"Opensource v3",description:"",content:""},{id:42,href:"/prologue/",title:"Prologue",description:"Prologue Doks.",content:""},{id:43,href:"/",title:"Welcome, and have fun!",description:"",content:"\u003cp\u003eHello ;)\u003c/p\u003e\n"},{id:44,href:"/contributors/",title:"Contributors",description:null,content:""}];b.add(c),userinput.addEventListener('input',e,!0),suggestions.addEventListener('click',f,!0);function e(){var g=this.value,e=b.search(g,5),f=suggestions.childNodes,h=0,i=e.length,c;for(suggestions.classList.remove('d-none'),e.forEach(function(b){c=document.createElement('div'),c.innerHTML='<a href><span></span><span></span></a>',a=c.querySelector('a'),t=c.querySelector('span:first-child'),d=c.querySelector('span:nth-child(2)'),a.href=b.href,t.textContent=b.title,d.textContent=b.description,suggestions.appendChild(c)});f.length>i;)suggestions.removeChild(f[h])}function f(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()